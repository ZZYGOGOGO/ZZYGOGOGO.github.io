<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++基础复习题集</title>
      <link href="2021/08/08/C-%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
      <url>2021/08/08/C-%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="有很长时间没有更新了，C-竞赛的知识两个月不碰就会忘记很多，所以今天就来复习一下C-的竞赛习题，体型会比较多，难度逐级上升"><a href="#有很长时间没有更新了，C-竞赛的知识两个月不碰就会忘记很多，所以今天就来复习一下C-的竞赛习题，体型会比较多，难度逐级上升" class="headerlink" title="有很长时间没有更新了，C++竞赛的知识两个月不碰就会忘记很多，所以今天就来复习一下C++的竞赛习题，体型会比较多，难度逐级上升"></a>有很长时间没有更新了，C++竞赛的知识两个月不碰就会忘记很多，所以今天就来复习一下C++的竞赛习题，体型会比较多，难度逐级上升</h3><h3 id="买U盘-误差修正版-10-分"><a href="#买U盘-误差修正版-10-分" class="headerlink" title="买U盘(误差修正版) (10 分)"></a><center><strong>买U盘(误差修正版) (10 分)</strong></center></h3><p>IT 协会举办程序设计竞赛，准备购买 U 盘作奖品。请编写程序，根据活动经费和 U 盘单价预估可购买 U 盘的最大数量。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><blockquote><p>活动经费和 U 盘单价</p></blockquote><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><blockquote><p>可购买 U 盘的最大数量</p></blockquote><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">660.8 47.2</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure><h4 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">504.9 19.8</span><br></pre></td></tr></table></figure><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure><blockquote><p>结尾无空行</p></blockquote><hr><p>要求：考虑实数的误差。</p><div align=center><img width = '150' height ='150' src ="https://user-images.githubusercontent.com/79883276/128615495-5c468e0b-8a3b-468a-bbdc-c27c3262ce71.png"/></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> money,price;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>,&amp;money,&amp;price);</span><br><span class="line"><span class="keyword">double</span> sum=money/price+<span class="number">0.000001</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(<span class="keyword">int</span>)sum); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-4-计算天数-15-分"><a href="#7-4-计算天数-15-分" class="headerlink" title="7-4 计算天数 (15 分)"></a><center>7-4 计算天数 (15 分)</center></h3><p>本题要求编写程序计算某年某月某日是该年中的第几天。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行中按照格式“yyyy/mm/dd”（即“年/月/日”）给出日期。注意：闰年的判别条件是该年年份能被4整除但不能被100整除、或者能被400整除。闰年的2月有29天。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行输出日期是该年中的第几天。</p><h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1:"></a>输入样例1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2009/03/02</span><br></pre></td></tr></table></figure><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">61</span><br></pre></td></tr></table></figure><h3 id="输入样例2-1"><a href="#输入样例2-1" class="headerlink" title="输入样例2:"></a>输入样例2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2000/03/02</span><br></pre></td></tr></table></figure><h3 id="输出样例2-1"><a href="#输出样例2-1" class="headerlink" title="输出样例2:"></a>输出样例2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">62</span><br></pre></td></tr></table></figure> <div align=center><img width = '150' height ='150' src ="https://user-images.githubusercontent.com/79883276/128615495-5c468e0b-8a3b-468a-bbdc-c27c3262ce71.png"/></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Month[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;<span class="comment">//全局数组 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isRunYear</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123; <span class="comment">//判断闰年 </span></span><br><span class="line"><span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||(year%<span class="number">400</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> year,month,day,sum;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d/%d/%d&quot;</span>,&amp;year,&amp;month,&amp;day);</span><br><span class="line"><span class="comment">//printf(&quot;%d/%d/%d&quot;,year,month,day);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isRunYear</span>(year)==<span class="literal">true</span>) Month[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line"><span class="keyword">else</span> Month[<span class="number">2</span>]=<span class="number">28</span>;</span><br><span class="line">sum=day;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">1</span>;m&lt;month;m++)&#123;</span><br><span class="line">sum+=Month[m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-17-约分最简分式-15-分"><a href="#7-17-约分最简分式-15-分" class="headerlink" title="7-17 约分最简分式 (15 分)"></a><center>7-17 约分最简分式 (15 分)</center></h3><p>分数可以表示为<code>分子/分母</code>的形式。编写一个程序，要求用户输入一个分数，然后将其约分为最简分式。最简分式是指分子和分母不具有可以约分的成分了。如6/12可以被约分为1/2。当分子大于分母时，不需要表达为整数又分数的形式，即11/8还是11/8；而当分子分母相等时，仍然表达为1/1的分数形式。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出一个分数，分子和分母中间以斜杠<code>/</code>分隔，如：<code>12/34</code>表示34分之12。分子和分母都是正整数（不包含0，如果不清楚正整数的定义的话）。</p><p><strong>提示：</strong></p><ul><li>对于C语言，在<code>scanf</code>的格式字符串中加入<code>/</code>，让<code>scanf</code>来处理这个斜杠。</li><li>对于Python语言，用<code>a,b=map(int, input().split(&#39;/&#39;))</code>这样的代码来处理这个斜杠。</li></ul><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出这个分数对应的最简分式，格式与输入的相同，即采用<code>分子/分母</code>的形式表示分数。如 <code>5/6</code>表示6分之5。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">66/120</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11/20</span><br></pre></td></tr></table></figure> <div align=center><img width = '150' height ='150' src ="https://user-images.githubusercontent.com/79883276/128615495-5c468e0b-8a3b-468a-bbdc-c27c3262ce71.png"/></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fenZi,fenMu;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d/%d&quot;</span>,&amp;fenZi,&amp;fenMu);</span><br><span class="line"><span class="keyword">int</span> k=__gcd(fenZi,fenMu);<span class="comment">//__gcd(int a,int b)，C++自带的求最大公约数的函数 </span></span><br><span class="line">fenZi/=k;</span><br><span class="line">fenMu/=k;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d/%d&quot;</span>,fenZi,fenMu);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-20-查验身份证-20-分"><a href="#7-20-查验身份证-20-分" class="headerlink" title="7-20 查验身份证 (20 分)"></a><center>7-20 查验身份证 (20 分)</center></h3><p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：</p><p>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值<code>Z</code>；最后按照以下关系对应<code>Z</code>值与校验码<code>M</code>的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z：0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">M：1 0 X 9 8 7 6 5 4 3 2</span><br></pre></td></tr></table></figure><p>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出正整数<em>N</em>（≤100）是输入的身份证号码的个数。随后<em>N</em>行，每行给出1个18位身份证号码。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出<code>All passed</code>。</p><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">320124198808240056</span><br><span class="line">12010X198901011234</span><br><span class="line">110108196711301866</span><br><span class="line">37070419881216001X结尾无空行</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12010X198901011234</span><br><span class="line">110108196711301866</span><br><span class="line">37070419881216001X结尾无空行</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">320124198808240056</span><br><span class="line">110108196711301862</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">All passed</span><br></pre></td></tr></table></figure> <div align=center><img width = '150' height ='150' src ="https://user-images.githubusercontent.com/79883276/128615495-5c468e0b-8a3b-468a-bbdc-c27c3262ce71.png"/></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">17</span>]=&#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> M[<span class="number">11</span>]=&#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> n,flag=<span class="number">0</span>;</span><br><span class="line"> cin&gt;&gt;n;</span><br><span class="line"> <span class="keyword">while</span>(n--)&#123;</span><br><span class="line"> string str;</span><br><span class="line"> cin&gt;&gt;str;</span><br><span class="line"> <span class="keyword">int</span> sum=<span class="number">0</span>,f=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">17</span>;i++)&#123;</span><br><span class="line"> <span class="keyword">int</span> s=(str[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"> <span class="keyword">if</span>(s&gt;=<span class="number">0</span>&amp;&amp;s&lt;=<span class="number">9</span>) sum+=x[i]*s;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">f=flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> z=sum%<span class="number">11</span>;</span><br><span class="line"><span class="keyword">char</span> m=M[z];</span><br><span class="line"><span class="keyword">if</span>(m==str[<span class="number">17</span>]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(!flag) cout&lt;&lt;<span class="string">&quot;All passed&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><center>7-20 查验身份证 (20 分)</center><p>7-15 矩阵A乘以B (15 分)</p><p>给定两个矩阵<em>A</em>和<em>B</em>，要求你计算它们的乘积矩阵<em>A**B</em>。需要注意的是，只有规模匹配的矩阵才可以相乘。即若<em>A</em>有<em>R**a</em>行、<em>C**a</em>列，<em>B</em>有<em>R**b</em>行、<em>C**b</em>列，则只有<em>C**a</em>与<em>R**b</em>相等时，两个矩阵才能相乘。</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入先后给出两个矩阵<em>A</em>和<em>B</em>。对于每个矩阵，首先在一行中给出其行数<em>R</em>和列数<em>C</em>，随后<em>R</em>行，每行给出<em>C</em>个整数，以1个空格分隔，且行首尾没有多余的空格。输入保证两个矩阵的<em>R</em>和<em>C</em>都是正数，并且所有整数的绝对值不超过100。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>若输入的两个矩阵的规模是匹配的，则按照输入的格式输出乘积矩阵<em>A**B</em>，否则输出<code>Error: Ca != Rb</code>，其中<code>Ca</code>是<em>A</em>的列数，<code>Rb</code>是<em>B</em>的行数。</p><h3 id="输入样例1：-1"><a href="#输入样例1：-1" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">3 4</span><br><span class="line">7 8 9 0</span><br><span class="line">-1 -2 -3 -4</span><br><span class="line">5 6 7 8结尾无空行</span><br></pre></td></tr></table></figure><h3 id="输出样例1：-1"><a href="#输出样例1：-1" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 4</span><br><span class="line">20 22 24 16</span><br><span class="line">53 58 63 28结尾无空行</span><br></pre></td></tr></table></figure><h3 id="输入样例2：-1"><a href="#输入样例2：-1" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">38 26</span><br><span class="line">43 -5</span><br><span class="line">0 17</span><br><span class="line">3 2</span><br><span class="line">-11 57</span><br><span class="line">99 68</span><br><span class="line">81 72</span><br></pre></td></tr></table></figure><h3 id="输出样例2：-1"><a href="#输出样例2：-1" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: 2 != 3</span><br></pre></td></tr></table></figure> <div align=center><img width = '150' height ='150' src ="https://user-images.githubusercontent.com/79883276/128615495-5c468e0b-8a3b-468a-bbdc-c27c3262ce71.png"/></div><p><a href="https://user-images.githubusercontent.com/79883276/128646590-6b6480e2-0880-4f31-834f-6857c159a236.png"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ra,ca,rb,cb;</span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">110</span>][<span class="number">110</span>],b[<span class="number">110</span>][<span class="number">110</span>],c[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line">  cin&gt;&gt;ra&gt;&gt;ca;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ra;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ca;j++)</span><br><span class="line">      cin&gt;&gt;a[i][j];</span><br><span class="line">  &#125;</span><br><span class="line">  cin&gt;&gt;rb&gt;&gt;cb;</span><br><span class="line"><span class="keyword">if</span>(ca!=rb) &#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;Error: &quot;</span>&lt;&lt;ca&lt;&lt;<span class="string">&quot; != &quot;</span>&lt;&lt;rb;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rb;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cb;j++)</span><br><span class="line">      cin&gt;&gt;b[i][j];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p=ca;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ra;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cb;j++)&#123;</span><br><span class="line">      <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;p;k++)&#123;</span><br><span class="line">        sum+=a[i][k]*b[k][j];</span><br><span class="line">      &#125;</span><br><span class="line">      c[i][j]=sum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;ra&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;cb&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ra;i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cb;j++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(j)cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">  cout&lt;&lt;c[i][j];</span><br><span class="line">&#125;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础学习记录</title>
      <link href="2021/07/24/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>2021/07/24/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="用最简单的注释，解释类与对象、属性和方法、驼峰命名法则、变量命名、作用域"><a href="#用最简单的注释，解释类与对象、属性和方法、驼峰命名法则、变量命名、作用域" class="headerlink" title="用最简单的注释，解释类与对象、属性和方法、驼峰命名法则、变量命名、作用域"></a>用最简单的注释，解释类与对象、属性和方法、驼峰命名法则、变量命名、作用域</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @作者：ZZYGOGOGO</span></span><br><span class="line"><span class="comment"> * @日期：2021/7/24 - 15:35</span></span><br><span class="line"><span class="comment"> * 类和对象</span></span><br><span class="line"><span class="comment"> * 属性和方法</span></span><br><span class="line"><span class="comment"> * 命名法则：驼峰命名法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;<span class="comment">//类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*当一个变量被声明在类下面</span></span><br><span class="line"><span class="comment">    变量就叫做字段 或者属性、成员变量、Field*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> one=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NameIt</span><span class="params">(String Name)</span></span>&#123;<span class="comment">//方法</span></span><br><span class="line">        <span class="comment">/*如果一个变量，是声明在一个方法上的，就叫做参数</span></span><br><span class="line"><span class="comment">    参数的作用域即为该方法内的所有代码</span></span><br><span class="line"><span class="comment">    其他方法不能访问该参数</span></span><br><span class="line"><span class="comment">    类里面也不能访问该参数*/</span></span><br><span class="line">        name=Name;</span><br><span class="line">        <span class="comment">/*声明在方法内的变量，叫做局部变量</span></span><br><span class="line"><span class="comment">    其作用域在声明开始的位置，到其所处于的块结束位置*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;<span class="comment">//方法</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;名称: &quot;</span>+name+<span class="string">&quot; 价格: &quot;</span>+price+<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Item xuePing=<span class="keyword">new</span> Item();</span><br><span class="line">        xuePing.name=<span class="string">&quot;血瓶&quot;</span>;</span><br><span class="line">        xuePing.price=<span class="number">50</span>;</span><br><span class="line">        xuePing.Print();</span><br><span class="line"></span><br><span class="line">        Item shoes=<span class="keyword">new</span> Item();</span><br><span class="line">        shoes.name=<span class="string">&quot;草鞋&quot;</span>;</span><br><span class="line">        shoes.price=<span class="number">300</span>;</span><br><span class="line">        shoes.Print();</span><br><span class="line"></span><br><span class="line">        Item sword=<span class="keyword">new</span> Item();</span><br><span class="line">        sword.name=<span class="string">&quot;长剑&quot;</span>;</span><br><span class="line">        sword.price=<span class="number">350</span>;</span><br><span class="line">        sword.Print();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/79883276/126868016-c074ded8-c3fc-4948-822a-ce1c5ac4dca7.png" alt="20181213112746606"></p><h5 id="命名规则"><a href="#命名规则" class="headerlink" title="[命名规则]"></a>[命名规则]</h5><h4 id="变量的字符可以使用：字母、数字（变量的第一个字符不能用）、下划线、"><a href="#变量的字符可以使用：字母、数字（变量的第一个字符不能用）、下划线、" class="headerlink" title="变量的字符可以使用：字母、数字（变量的第一个字符不能用）、下划线、$"></a>变量的字符可以使用：字母、数字（变量的第一个字符不能用）、下划线、$</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> hp=<span class="number">3.14f</span>;</span><br><span class="line">    <span class="keyword">byte</span> b=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">short</span> c=<span class="number">120</span>;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">long</span> t=<span class="number">10L</span>;</span><br><span class="line">    <span class="keyword">long</span> y=<span class="number">199</span>;</span><br><span class="line">    <span class="keyword">double</span> d=<span class="number">1.234567e2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/79883276/126868026-f3c7d3e3-6c28-43ea-9959-daed602a0a32.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础练习题</title>
      <link href="2021/07/24/Java%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>2021/07/24/Java%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="【程序1】"><a href="#【程序1】" class="headerlink" title="【程序1】"></a>【程序1】</h4><p>題目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一<br>对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p><p>这道题是典型的斐波那契数列的应用</p><h3 id="斐波那契数列——兔子繁殖问题"><a href="#斐波那契数列——兔子繁殖问题" class="headerlink" title="斐波那契数列——兔子繁殖问题"></a>斐波那契数列——兔子繁殖问题</h3><p>斐波那契数列又因数学家莱昂纳多·斐波那契以兔子繁殖为例子而引入，故又称为“<a href="https://baike.baidu.com/item/%E5%85%94%E5%AD%90%E6%95%B0%E5%88%97">兔子数列</a>”。</p><p>一般而言，兔子在出生两个月后，就有繁殖能力，一对兔子每个月能生出一对小兔子来。如果所有兔子都不死，那么一年以后可以繁殖多少对兔子？</p><p>我们不妨拿新出生的一对小兔子分析一下：</p><p>第一个月小兔子没有繁殖能力，所以还是一对</p><p>两个月后，生下一对小兔对数共有两对</p><p>三个月以后，老兔子又生下一对，因为小兔子还没有繁殖能力，所以一共是三对</p><p>－－－－－－</p><p>依次类推可以列出下表：</p><table><thead><tr><th>经过月数</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>…</th></tr></thead><tbody><tr><td>幼仔对数</td><td>1</td><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td><td>34</td><td>55</td><td>…</td></tr><tr><td>成兔对数</td><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td><td>34</td><td>55</td><td>89</td><td></td></tr><tr><td>总体对数</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td><td>34</td><td>55</td><td>89</td><td>144</td><td></td></tr></tbody></table><p>幼仔对数=前月成兔对数</p><p>成兔对数=前月成兔对数+前月幼仔对数</p><p>总体对数=本月成兔对数+本月幼仔对数</p><p>可以看出幼仔对数、成兔对数、总体对数都构成了一个数列。这个数列有关十分明显的特点，那是：前面相邻两项之和，构成了后一项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @作者：ZZYGOGOGO</span></span><br><span class="line"><span class="comment"> * @日期：2021/7/23 - 23:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">example1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">37</span>];</span><br><span class="line">        a[<span class="number">1</span>]=a[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;第1个月有1对兔子，总数是2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第2个月有1对兔子，总数是2&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">12</span>;i++)&#123;</span><br><span class="line">            a[i]=a[i-<span class="number">1</span>]+a[i-<span class="number">2</span>];</span><br><span class="line">            System.out.printf(<span class="string">&quot;第%d个月有%d对兔子，总数是%d\n&quot;</span>,i,a[i],<span class="number">2</span>*a[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序2】<br>题目：判断101-200之间有多少个素数，并输出所有素数。 </p><p>素数又叫质数，就是除了1和它本身之外，再也没有整数能被它整除的数。也就是素数只有两个因子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @作者：ZZYGOGOGO</span></span><br><span class="line"><span class="comment"> * @日期：2021/7/24 - 11:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">example2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">101</span>;i&lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=i,f=<span class="number">0</span>; <span class="comment">//f用于标记是否存在可以整除的因子</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j*j&lt;=x;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x%j==<span class="number">0</span>) &#123;f=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(f==<span class="number">0</span>) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序3】<br>题目：打印出所有的”水仙花数”，所谓”水仙花数”是指一个三位数，其各位数字立方和等于该数本身。例如：<br>153是一个”水仙花数”，因为153=1的三次方＋5的三次方＋3的三次方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @作者：ZZYGOGOGO</span></span><br><span class="line"><span class="comment"> * @日期：2021/7/24 - 11:53</span></span><br><span class="line"><span class="comment"> * 题目：打印出所有的&quot;水仙花数&quot;，所谓&quot;水仙花数&quot;是指一个三位数，其各位数字立方和等于该数本身。例如：</span></span><br><span class="line"><span class="comment"> * 153是一个&quot;水仙花数&quot;，因为153=1的三次方＋5的三次方＋3的三次方。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">example3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">100</span>;y&lt;=<span class="number">999</span>;y++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=y,sum=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//////////////</span></span><br><span class="line">            <span class="comment">//数位分离</span></span><br><span class="line">            <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> a=x%<span class="number">10</span>;</span><br><span class="line">                x/=<span class="number">10</span>;</span><br><span class="line">                sum+=a*a*a;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//////////////</span></span><br><span class="line">            <span class="keyword">if</span>(sum==y) System.out.println(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>何不用python做一个个性的五子棋？</title>
      <link href="2021/06/22/%E4%BD%95%E4%B8%8D%E7%94%A8python%E5%81%9A%E4%B8%80%E4%B8%AA%E4%BA%94%E5%AD%90%E6%A3%8B%EF%BC%9F/"/>
      <url>2021/06/22/%E4%BD%95%E4%B8%8D%E7%94%A8python%E5%81%9A%E4%B8%80%E4%B8%AA%E4%BA%94%E5%AD%90%E6%A3%8B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>前段时间和女朋友发现了五子棋游戏，我就要求和她下一把。我觉得自己是理科生嘛，我要是和她玩五子棋，那不肯定是妥妥的躺赢嘛！好家伙，刚下两分钟我就被她拿下了。怎么办呢，咱不能认输啊，必须得赢回来，哎，不服输。</p><h5 id="最后玩了好几把都是她赢我，呜呜呜，而且她还让了我好多次～"><a href="#最后玩了好几把都是她赢我，呜呜呜，而且她还让了我好多次～" class="headerlink" title="最后玩了好几把都是她赢我，呜呜呜，而且她还让了我好多次～"></a>最后玩了好几把都是她赢我，呜呜呜，而且她还让了我好多次～</h5><p>然后有一天突发灵感，用python的pygame做一个五子棋游戏。既能作为项目的结课作业，又能在以后无聊的时候和女朋友下着玩。这这这太划算了呀，必须做！</p><p>下面就是具体制作过程：</p><h4 id="制作准备："><a href="#制作准备：" class="headerlink" title="制作准备："></a>制作准备：</h4><p><strong>1.电脑安装pycharm软件、导入pygame库</strong></p><p><strong>2.准备一些图片和修图工具，以自己擅长的为准</strong></p><h4 id="开始制作："><a href="#开始制作：" class="headerlink" title="开始制作："></a>开始制作：</h4><p><strong>1.在你的项目文件夹中新建一个文件夹，命名为<mark class="hl-label blue">images</mark> （用于存放图片）,再新建一个文件夹，命名为<mark class="hl-label blue">music</mark> （用于存放背景音乐和音效）</strong></p><p>** 2.用pycharm打开你的项目文件夹，新建一个main.py ,作为我们的python程序，打开main.py**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame,time,sys</span><br><span class="line"><span class="keyword">from</span> pygame.<span class="built_in">locals</span> <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>示例文件下载：链接: <a href="https://pan.baidu.com/s/1Gfn3AiLlUMLq1TSn75p0rw">https://pan.baidu.com/s/1Gfn3AiLlUMLq1TSn75p0rw</a>  密码: vlab</p><p>项目下载：链接: <a href="https://pan.baidu.com/s/15rTO-ishxV2BB33TidBsRg">https://pan.baidu.com/s/15rTO-ishxV2BB33TidBsRg</a>  密码: c3dt</p><p>游戏的运行过程，就是不断的调用各种函数。</p><p><strong>3.接下来创建我们的main函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span> <span class="comment">#main函数的具体内容我们先不写，先看其他函数</span></span><br><span class="line">  <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   main()        <span class="comment">#调用主函数绘制窗口</span></span><br></pre></td></tr></table></figure><p>参考游戏的结构图</p><p><strong>3.5.设置变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Board = []     <span class="comment">#棋盘</span></span><br><span class="line">Role = <span class="number">2</span> <span class="comment">#角色 1:白棋；2:黑棋</span></span><br><span class="line">resultFlag = <span class="number">0</span> <span class="comment">#游戏结果判断</span></span><br><span class="line">isRun =<span class="number">0</span>  <span class="comment">#游戏运行状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个类变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,x,y,value</span>):</span></span><br><span class="line">        self.x,self.y,self.value = x,y,value</span><br></pre></td></tr></table></figure><p>#有关类的知识以及面向对象的知识，可以参考这个链接：<br><a href="https://www.cnblogs.com/chengd/articles/7287528.html#top"></a></p><p><strong>4.创建“自定功能”的函数</strong></p><p><strong>开始游戏</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>():</span>        <span class="comment">#开始游戏</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line">    bo_effect.play()</span><br><span class="line">    pygame.mixer.music.play()</span><br><span class="line">    <span class="keyword">global</span> isRun</span><br><span class="line">    isRun=<span class="number">1</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>暂停/继续</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pause</span>():</span>    <span class="comment">#暂停/继续</span></span><br><span class="line">    <span class="keyword">global</span> isRun,pa</span><br><span class="line">    <span class="keyword">if</span>(isRun&gt;<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;pause&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;continue&quot;</span>)</span><br><span class="line">    <span class="commentpause_effect.play()</span></span><br><span class="line">    isRun=isRun*(-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>查看游戏规则</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkRole</span>():</span>    <span class="comment">#查看游戏规则</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;CheckRole&quot;</span>)</span><br><span class="line">    info_effect.play()</span><br><span class="line">    <span class="keyword">global</span> isRun</span><br><span class="line">    isRun=-<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>退出游戏</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span>():</span>   <span class="comment">#退出游戏</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Exit&quot;</span>)</span><br><span class="line">    <span class="comment">#exit_effect.play() #播放音效</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    pygame.quit()</span><br><span class="line">    sys.exit()</span><br></pre></td></tr></table></figure><p><strong>加载游戏素材（图片和音乐）、初始化游戏环境</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_src</span>():</span><span class="comment">#加载游戏素材（图片和音乐）、初始化游戏环境</span></span><br><span class="line">    <span class="keyword">global</span> Board, resultFlag, Role, isRun, screen, background, \</span><br><span class="line">        mouse_cursor,dot, info, bg0, bg3, bg4, sound_effect, win_effect, \</span><br><span class="line">        pause_effect, info_effect, exit_effect, happy_effect, bo_effect, whitePiece, blackPiece, whiteWin, blackWin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pygame.init()  <span class="comment"># 初始化游戏环境</span></span><br><span class="line">    pygame.mixer.init()</span><br><span class="line">    <span class="comment"># 混音器初始化</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#初始化游戏窗口</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">780</span>, <span class="number">620</span>), RESIZABLE, <span class="number">32</span>)  <span class="comment"># 创建游戏窗口 # 第一个参数是元组：窗口的长和宽</span></span><br><span class="line"></span><br><span class="line">    pygame.display.set_caption(<span class="string">&quot;五子棋1.0———by风清扬&quot;</span>)  <span class="comment"># 添加游戏标题</span></span><br><span class="line">    info = pygame.image.load(<span class="string">&quot;images/info.jpg&quot;</span>)  <span class="comment">#</span></span><br><span class="line">    bg0 = pygame.image.load(<span class="string">&quot;images/bg0.jpeg&quot;</span>)  <span class="comment"># 加载背景图片</span></span><br><span class="line">    bg3 = pygame.image.load(<span class="string">&quot;images/bg3.jpg&quot;</span>)</span><br><span class="line">    bg4 = pygame.image.load(<span class="string">&quot;images/bg4.jpeg&quot;</span>)  <span class="comment">#</span></span><br><span class="line">    background = pygame.image.load(<span class="string">&quot;images/bg.png&quot;</span>)  <span class="comment"># 加载背景图片</span></span><br><span class="line">    whitePiece = pygame.image.load(<span class="string">&quot;images/white_piece.png&quot;</span>)  <span class="comment"># 加载白棋图片</span></span><br><span class="line">    blackPiece = pygame.image.load(<span class="string">&quot;images/black_piece.png&quot;</span>)  <span class="comment"># 加载黑棋图片</span></span><br><span class="line">    blackWin = pygame.image.load(<span class="string">&quot;images/black_win.jpg&quot;</span>)  <span class="comment"># 加载黑棋胜利图片</span></span><br><span class="line">    whiteWin = pygame.image.load(<span class="string">&quot;images/white_win.jpg&quot;</span>)  <span class="comment"># 加载黑棋胜利图片</span></span><br><span class="line"></span><br><span class="line">    dot=pygame.image.load(<span class="string">&quot;images/dot.png&quot;</span>)  <span class="comment"># 加载鼠标图片</span></span><br><span class="line">    mouse_cursor = pygame.image.load(<span class="string">&quot;images/black_piece.png&quot;</span>)  <span class="comment"># 加载鼠标图片</span></span><br><span class="line"></span><br><span class="line">    sound_effect = pygame.mixer.Sound(<span class="string">&quot;music/m.mp3&quot;</span>)</span><br><span class="line">    win_effect = pygame.mixer.Sound(<span class="string">&quot;music/win.mp3&quot;</span>)</span><br><span class="line">    pause_effect = pygame.mixer.Sound(<span class="string">&quot;music/pause.mp3&quot;</span>)</span><br><span class="line">    info_effect = pygame.mixer.Sound(<span class="string">&quot;music/info.mp3&quot;</span>)</span><br><span class="line">    exit_effect = pygame.mixer.Sound(<span class="string">&quot;music/exit.mp3&quot;</span>)</span><br><span class="line">    happy_effect = pygame.mixer.Sound(<span class="string">&quot;music/happy.mp3&quot;</span>)</span><br><span class="line">    bo_effect = pygame.mixer.Sound(<span class="string">&quot;music/bo.mp3&quot;</span>)</span><br><span class="line">    pygame.mixer.music.load(<span class="string">&quot;music/bgm.mp3&quot;</span>)  <span class="comment"># 背景音乐</span></span><br><span class="line"></span><br><span class="line">    happy_effect.play(-<span class="number">1</span>)</span><br><span class="line">    isRun=<span class="number">0</span><span class="comment">#进入欢迎界面</span></span><br><span class="line">    resultFlag=-<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>5.创建其他函数</strong></p><p><strong>棋盘初始化函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initBoard</span>(<span class="params">x,y</span>):</span>     <span class="comment">#棋盘初始化函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;初始化棋盘&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>): <span class="comment">#总共15行</span></span><br><span class="line">        rowlist = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">            pointX,pointY= x+ j*<span class="number">40</span>,y+ i*<span class="number">40</span>  <span class="comment">#每一行有15列</span></span><br><span class="line">            p = Point(pointX,pointY,<span class="number">0</span>)  <span class="comment">#记录每一行与列的交点的坐标</span></span><br><span class="line">            rowlist.append(p)</span><br><span class="line">        Board.append(rowlist)<span class="comment">#记录每一行的15个列的坐标</span></span><br></pre></td></tr></table></figure><p><strong>事件监视器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eventHander</span>():</span>              <span class="comment">#事件监视器</span></span><br><span class="line">    <span class="keyword">global</span> mouse_cursor,Role,isRun</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == QUIT:</span><br><span class="line">           exit()</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == MOUSEBUTTONDOWN:</span><br><span class="line">            x,y = pygame.mouse.get_pos()</span><br><span class="line">            i=j=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> x&gt;=<span class="number">638</span> <span class="keyword">and</span> x&lt;=<span class="number">730</span> <span class="keyword">and</span> y&gt;=<span class="number">229</span> <span class="keyword">and</span> y&lt;=<span class="number">255</span>: <span class="comment">#退出</span></span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">if</span> x &gt;= <span class="number">656</span> <span class="keyword">and</span> x &lt;= <span class="number">759</span> <span class="keyword">and</span> y &gt;= <span class="number">162</span> <span class="keyword">and</span> y &lt;= <span class="number">181</span>:  <span class="comment"># 查看规则</span></span><br><span class="line">                checkRole()</span><br><span class="line">            <span class="keyword">if</span> x &gt;= <span class="number">660</span> <span class="keyword">and</span> x &lt;= <span class="number">748</span> <span class="keyword">and</span> y &gt;= <span class="number">45</span> <span class="keyword">and</span> y &lt;= <span class="number">68</span>:  <span class="comment"># 开始游戏</span></span><br><span class="line">                start()</span><br><span class="line">            <span class="keyword">if</span> x &gt;= <span class="number">642</span> <span class="keyword">and</span> x &lt;= <span class="number">728</span> <span class="keyword">and</span> y &gt;= <span class="number">106</span> <span class="keyword">and</span> y &lt;= <span class="number">130</span>:  <span class="comment"># 暂停游戏</span></span><br><span class="line">                pause()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> isRun&gt;<span class="number">0</span>: <span class="comment">#处于游戏运行状态</span></span><br><span class="line">                <span class="keyword">for</span> temp <span class="keyword">in</span> Board:</span><br><span class="line">                    <span class="keyword">for</span> point <span class="keyword">in</span> temp:</span><br><span class="line">                        <span class="keyword">if</span> x &gt;= point.x - <span class="number">10</span> <span class="keyword">and</span> x &lt;= point.x + <span class="number">10</span> <span class="keyword">and</span> y &gt;= point.y - <span class="number">10</span> <span class="keyword">and</span> y &lt;= point.y + <span class="number">10</span>:</span><br><span class="line">                            sound_effect.play()</span><br><span class="line">                            <span class="keyword">if</span> point.value == <span class="number">0</span> <span class="keyword">and</span> Role == <span class="number">1</span>:  <span class="comment"># 若棋盘位置为空；棋子为白棋</span></span><br><span class="line">                                point.value = <span class="number">1</span>  <span class="comment"># 鼠标点击时，棋子为白棋</span></span><br><span class="line">                                Judge(i, j, <span class="number">1</span>)</span><br><span class="line">                                Role = <span class="number">2</span>  <span class="comment"># 切换角色</span></span><br><span class="line">                                mouse_cursor = pygame.image.load(<span class="string">&quot;images/black_piece.png&quot;</span>)  <span class="comment"># 切换鼠标图片（黑白棋子）</span></span><br><span class="line">                            <span class="keyword">elif</span> point.value == <span class="number">0</span> <span class="keyword">and</span> Role == <span class="number">2</span>:  <span class="comment"># 若棋盘位置为空；棋子为黑棋</span></span><br><span class="line">                                point.value = <span class="number">2</span>  <span class="comment"># 鼠标点击时，棋子为黑棋</span></span><br><span class="line">                                Judge(i, j, <span class="number">2</span>)</span><br><span class="line">                                Role = <span class="number">1</span>  <span class="comment"># 切换角色</span></span><br><span class="line">                                mouse_cursor = pygame.image.load(<span class="string">&quot;images/white_piece.png&quot;</span>)</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        j += <span class="number">1</span> <span class="comment">#此行的下一列</span></span><br><span class="line">                    i += <span class="number">1</span><span class="comment">#下一行</span></span><br><span class="line">                    j = <span class="number">0</span><span class="comment">#下一行从第一列开始</span></span><br></pre></td></tr></table></figure><p><strong>判断输赢函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Judge</span>(<span class="params">i,j,value</span>):</span>  <span class="comment">#从四个方向判断是否五子连珠</span></span><br><span class="line">    <span class="keyword">global</span> resultFlag</span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span>  <span class="built_in">range</span>(j - <span class="number">4</span>, j + <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> x + <span class="number">4</span> &lt; <span class="number">15</span> :</span><br><span class="line">            <span class="keyword">if</span> Board[i][x].value == value <span class="keyword">and</span> \</span><br><span class="line">                Board[i][x + <span class="number">1</span>].value == value <span class="keyword">and</span> \</span><br><span class="line">                Board[i][x + <span class="number">2</span>].value == value <span class="keyword">and</span> \</span><br><span class="line">                Board[i][x + <span class="number">3</span>].value == value <span class="keyword">and</span> \</span><br><span class="line">                Board[i][x + <span class="number">4</span>].value == value :</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(i - <span class="number">4</span>, i + <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> x + <span class="number">4</span> &lt; <span class="number">15</span>:</span><br><span class="line">            <span class="keyword">if</span> Board[x][j].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[x + <span class="number">1</span>][j].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[x + <span class="number">2</span>][j].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[x + <span class="number">3</span>][j].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[x + <span class="number">4</span>][j].value == value:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(j + <span class="number">4</span>, j - <span class="number">5</span>, -<span class="number">1</span>), <span class="built_in">range</span>(i - <span class="number">4</span>, i + <span class="number">5</span>)):</span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> x + <span class="number">4</span> &lt; <span class="number">15</span> <span class="keyword">and</span> y + <span class="number">4</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> y &lt; <span class="number">15</span>:</span><br><span class="line">            <span class="keyword">if</span> Board[y][x].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[y - <span class="number">1</span>][x + <span class="number">1</span>].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[y - <span class="number">2</span>][x + <span class="number">2</span>].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[y - <span class="number">3</span>][x + <span class="number">3</span>].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[y - <span class="number">4</span>][x + <span class="number">4</span>].value == value:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(j - <span class="number">4</span>, j + <span class="number">5</span>), <span class="built_in">range</span>(i - <span class="number">4</span>, i + <span class="number">5</span>)):</span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> x + <span class="number">4</span> &lt; <span class="number">15</span> <span class="keyword">and</span> y &gt;= <span class="number">0</span> <span class="keyword">and</span> y + <span class="number">4</span> &lt; <span class="number">15</span>:</span><br><span class="line">            <span class="keyword">if</span> Board[y][x].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[y + <span class="number">1</span>][x + <span class="number">1</span>].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[y + <span class="number">2</span>][x + <span class="number">2</span>].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[y + <span class="number">3</span>][x + <span class="number">3</span>].value == value <span class="keyword">and</span> \</span><br><span class="line">                    Board[y + <span class="number">4</span>][x + <span class="number">4</span>].value == value:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        resultFlag = value <span class="comment">#获取五子连珠的棋子颜色</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;白子胜利！&quot;</span> <span class="keyword">if</span> value ==<span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;黑子胜利&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>6.完善main函数</strong></p><p>无论在哪个函数中，如果用到了全局变量，就要在函数开头加上 global “变量名”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">global</span> Board, resultFlag, Role, isRun, screen, background, \</span><br><span class="line">      mouse_cursor,dot, info, bg0, bg3, bg4, sound_effect, win_effect,lastx,lasty,\</span><br><span class="line">      pause_effect, info_effect, exit_effect, happy_effect, bo_effect,whitePiece,blackPiece,whiteWin,blackWin</span><br></pre></td></tr></table></figure><p>初始化“上次棋子的高亮显示”位置加载素材并初始化游戏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lastx,lasty=<span class="number">700</span>,<span class="number">700</span> <span class="comment">#超出窗体，不显示</span></span><br><span class="line">load_src()</span><br></pre></td></tr></table></figure><p>注意：</p><p>1.用两个while循环来实现各个功能</p><p>2.isRun的值和resultFlag的值决定了跳转到哪个界面，读者请细细体会</p><p>3.在每个界面函数中都要有eventHander函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> isRun==<span class="number">0</span>:                         <span class="comment">#欢迎界面</span></span><br><span class="line">        screen.blit(bg0, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        screen.blit(bg3, (<span class="number">618</span>, <span class="number">0</span>))</span><br><span class="line">        screen.blit(bg4, (<span class="number">623</span>, <span class="number">305</span>))</span><br><span class="line">        pygame.display.update()  <span class="comment"># 更新视图</span></span><br><span class="line">        eventHander()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> isRun &gt;<span class="number">0</span> <span class="keyword">and</span> resultFlag!=-<span class="number">1</span>:                        <span class="comment">#开始后界面</span></span><br><span class="line">        happy_effect.stop()</span><br><span class="line">        screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        screen.blit(bg3, (<span class="number">618</span>, <span class="number">0</span>))</span><br><span class="line">        screen.blit(bg4, (<span class="number">623</span>, <span class="number">305</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> Board:</span><br><span class="line">            x, y = pygame.mouse.get_pos()</span><br><span class="line">            x -= mouse_cursor.get_width() / <span class="number">2</span></span><br><span class="line">            y -= mouse_cursor.get_height() / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> point <span class="keyword">in</span> temp:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> point.value == <span class="number">1</span>:  <span class="comment"># 白棋</span></span><br><span class="line">                    screen.blit(whitePiece, (point.x - <span class="number">18</span>, point.y - <span class="number">18</span>))</span><br><span class="line">                <span class="keyword">elif</span> point.value == <span class="number">2</span>:  <span class="comment"># 黑棋</span></span><br><span class="line">                    screen.blit(blackPiece, (point.x - <span class="number">18</span>, point.y - <span class="number">18</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">580</span> <span class="keyword">and</span> x &lt;= <span class="number">770</span> <span class="keyword">and</span> y &gt;= <span class="number">0</span> <span class="keyword">and</span> y &lt;= <span class="number">620</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            screen.blit(mouse_cursor, (x, y))</span><br><span class="line"></span><br><span class="line">        screen.blit(dot,(lastx,lasty))</span><br><span class="line"></span><br><span class="line">        x = <span class="number">200</span></span><br><span class="line">        y = <span class="number">150</span></span><br><span class="line">        <span class="keyword">if</span> resultFlag &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> resultFlag == <span class="number">1</span>:</span><br><span class="line">                screen.blit(whiteWin, (x, y))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                screen.blit(blackWin, (x, y))</span><br><span class="line"></span><br><span class="line">            pygame.mixer.music.stop()</span><br><span class="line">            win_effect.play()</span><br><span class="line"></span><br><span class="line">        pygame.display.update()  <span class="comment"># 更新视图</span></span><br><span class="line">        <span class="keyword">if</span> resultFlag &gt; <span class="number">0</span>:</span><br><span class="line">            time.sleep(<span class="number">1.3</span>)</span><br><span class="line">            resultFlag=-<span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        eventHander()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        eventHander()</span><br><span class="line">        <span class="keyword">while</span> isRun == -<span class="number">1</span>:             <span class="comment">#####游戏规则界面</span></span><br><span class="line">            screen.blit(info, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">            screen.blit(bg3, (<span class="number">618</span>, <span class="number">0</span>))</span><br><span class="line">            screen.blit(bg4, (<span class="number">623</span>, <span class="number">305</span>))</span><br><span class="line">            pygame.display.update()  <span class="comment"># 更新视图</span></span><br><span class="line">            eventHander()</span><br></pre></td></tr></table></figure><p><strong>7.细节补充</strong></p><p>如果你看上面的main函数有困难，请看这里！</p><p>1.在本程序中，pygame的screen.blit(p1,(x,y)) 意思是在坐标(x,y)处，加载一个图像，这个图像加载过后并不会消失，但是你可以通过改变x，y的值来控制图像的移动，至于怎样消除图像，读者需要自行查找资料。</p><p>2.关于鼠标图片的显示原理。首先获取鼠标的坐标，然后当坐标在棋盘上时，我们隐藏鼠标，并加载棋子的图像，每下过一次棋子后，就转换加载的图像。</p><p>3.关于“高亮显示上一次棋子位置”。与上面鼠标的显示原理类似。只要用全局变量lastx，lasty记住上一次下的棋子的位置即可。记得在开始游戏的函数中复位lastx、lasty的初始坐标。</p><p>4.读者可以在理解代码的基础上进行修改，形成自己的个性化五子棋～</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python游戏 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask学习</title>
      <link href="2021/06/10/Python-Flask%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/06/10/Python-Flask%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="汇总了大二下学期爬虫课的所有Flask内容"><a href="#汇总了大二下学期爬虫课的所有Flask内容" class="headerlink" title="汇总了大二下学期爬虫课的所有Flask内容"></a>汇总了大二下学期爬虫课的所有Flask内容</h1><h2 id="1-Flask路由变量类型"><a href="#1-Flask路由变量类型" class="headerlink" title="1.Flask路由变量类型"></a>1.Flask路由变量类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">#注意post_id是整数，表示id/后面可以接受整数，</span><br><span class="line">#可以输入URL：127.0.0.1:5000/id/11(随意整数)</span><br><span class="line">@app.route(&#x27;/id/&lt;int:post_id&gt;&#x27;)</span><br><span class="line">def hello(post_id):</span><br><span class="line">    return &#x27;hello %d&#x27; % post_id</span><br><span class="line"></span><br><span class="line">#同理,rev/后面也可以接收任意小数，比如rev/10.0</span><br><span class="line">@app.route(&#x27;/rev/&lt;float:rev_no&gt;&#x27;)</span><br><span class="line">def revision(rev_no):</span><br><span class="line">    return &#x27;revision %f&#x27; % rev_no</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(port = &#x27;500&#x27;,debug=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-Flask-url-for-的使用"><a href="#2-Flask-url-for-的使用" class="headerlink" title="2.Flask+url_for()的使用"></a>2.Flask+url_for()的使用</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,redirect,url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;这里是主页面&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;你好 蔡徐坤&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/guest/&lt;guest&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_guest</span>(<span class="params">guest</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;你吼 %s&#x27;</span> % guest</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如果name与admin匹配，则通过url_for重定向hello(),</span></span><br><span class="line"><span class="string">否则，通过url_for重定向hello_guest(),并将name赋值</span></span><br><span class="line"><span class="string">给guest.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_user</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;网页跳转了1&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;网页跳转了2&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello_guest&#x27;</span>,guest = name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port = <span class="string">&#x27;500&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-Flask-HTTP"><a href="#3-Flask-HTTP" class="headerlink" title="3.Flask_HTTP"></a>3.Flask_HTTP</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,redirect,url_for,request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">&#x27;tem&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">success</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;欢迎 %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/victory/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">victory</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;你来啦 %s&#x27;</span> % name</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;测试methods方法，post意思是向url(服务器)传送html表单数据，get意思为抓取url已有的数据</span></span><br><span class="line"><span class="string">在具体使用上，get和post差别不大，post要更安全一点</span></span><br><span class="line"><span class="string">如果需要用post，则必须调用request.form模块，我们用form元素定义HTML表单</span></span><br><span class="line"><span class="string">注意：request.form模块就是对应着html表单中的form元素&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        user = request.form[<span class="string">&#x27;name_user&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>,name = user))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user = request.args.get(<span class="string">&#x27;name_user&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;victory&#x27;</span>,name = user))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port = <span class="string">&#x27;8&#x27;</span>,debug = <span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-Flask-模版（传入数据）"><a href="#4-Flask-模版（传入数据）" class="headerlink" title="4.Flask_模版（传入数据）"></a>4.Flask_模版（传入数据）</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;默认在templates文件夹里面查找HTML文件，如果想换文件夹的名字，</span></span><br><span class="line"><span class="string">需要使用template_folder=&#x27;&#x27;,但是只能平行查找文件夹,注意：</span></span><br><span class="line"><span class="string">模板文件夹名称不能含有中文&#x27;&#x27;&#x27;</span></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">&#x27;tem&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment">#往模板中传入数据</span></span><br><span class="line">    my_int = <span class="number">19</span></span><br><span class="line">    my_str = <span class="string">&#x27;tony&#x27;</span></span><br><span class="line">    my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">99</span>]</span><br><span class="line">    my_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;grade&#x27;</span> : <span class="string">&#x27;大二&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#render_template方法：渲染模板</span></span><br><span class="line">    <span class="comment">#参数1：模板名称  参数n:需要传到模板中的数据</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;4.flask_模板.html&#x27;</span>,</span><br><span class="line">                           my_int = my_int,</span><br><span class="line">                           my_str = my_str,</span><br><span class="line">                           my_list = my_list,</span><br><span class="line">                           my_dict = my_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port = <span class="string">&#x27;4&#x27;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="5-flask将表单数据发送到模板-以表格形式"><a href="#5-flask将表单数据发送到模板-以表格形式" class="headerlink" title="5.flask将表单数据发送到模板(以表格形式)"></a>5.flask将表单数据发送到模板(以表格形式)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">&#x27;tem&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student</span>():</span></span><br><span class="line">    <span class="comment">#student.html是表单数据，目的是将表单数据以表格形式发送到模板</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;5.student.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/sheet&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment">#sheet.html是表格数据，相当于表格框架，用student.html表单数据填充这个表格</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;5.sheet.html&#x27;</span>,sheet_user=request.form)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="string">&#x27;5&#x27;</span>,debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-上传文件"><a href="#6-上传文件" class="headerlink" title="6.上传文件"></a>6.上传文件</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传文件需要引入模板，还需要引入安全机制，因为在服务器中传输文件</span></span><br><span class="line"><span class="comment">#有可能造成路径修改，所以引入secure_filename</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">&#x27;tem&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#路径定义</span></span><br><span class="line">path = <span class="string">&#x27;C://upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件夹路径和文件可以传输的大小，其中16*1024*1024意思为16mb</span></span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = path</span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">16</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;6.upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/uploader&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploader_file</span>():</span></span><br><span class="line">    <span class="comment">#如果没有路径，就创造路径</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment">#上传文件file，并安全的以原文件名的形式保存在服务器上</span></span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        f.save(os.path.join(path,secure_filename(f.filename)))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;文件上传成功&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="string">&#x27;6&#x27;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="7-学生信息表"><a href="#7-学生信息表" class="headerlink" title="7.学生信息表"></a>7.学生信息表</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">&#x27;tem&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_info</span>():</span></span><br><span class="line"><span class="comment">#    for i in range(2):</span></span><br><span class="line"><span class="comment">#将列表依次传给表单的四个字段：No，Name，Gender,Age</span></span><br><span class="line">        No=[]</span><br><span class="line">        Name = []</span><br><span class="line">        Gender = []</span><br><span class="line">        f=<span class="built_in">open</span>(<span class="string">&#x27;nums.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        lines=f.readlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            No.append(line)</span><br><span class="line"></span><br><span class="line">        f=<span class="built_in">open</span>(<span class="string">&#x27;names.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        lines=f.readlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            Name.append(line)</span><br><span class="line"></span><br><span class="line">        f=<span class="built_in">open</span>(<span class="string">&#x27;gender.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        lines=f.readlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            Gender.append(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;7.student_info.html&#x27;</span>,</span><br><span class="line">                           No = No,</span><br><span class="line">                           Name = Name,</span><br><span class="line">                           Gender = Gender,</span><br><span class="line">                           Age=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="string">&#x27;8000&#x27;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="8-flask-cookies"><a href="#8-flask-cookies" class="headerlink" title="8.flask_cookies"></a>8.flask_cookies</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Cookie以文本文件的形式存储在客户端的计算机上。其目的是记住和跟踪与客户使用相关的数据，</span></span><br><span class="line"><span class="comment"># 以获得更好的访问者体验和网站统计信息</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,make_response,request</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Request对象包含Cookie的属性。它是所有cookie变量及其对应值的字典对象，</span></span><br><span class="line"><span class="string">客户端已传输。除此之外，cookie还存储其网站的到期时间，路径和域名。</span></span><br><span class="line"><span class="string">1. 设置cookie：</span></span><br><span class="line"><span class="string">    设置cookie,默认有效期是临时cookie,浏览器关闭就失效</span></span><br><span class="line"><span class="string">    可以通过 max_age 设置有效期，单位是秒,set_cookie(name,value,有效期)</span></span><br><span class="line"><span class="string">    其中，name和value类似于key和value，是字典类型</span></span><br><span class="line"><span class="string"> resp = make_response(&quot;success&quot;)   # 设置响应体</span></span><br><span class="line"><span class="string"> resp.set_cookie(&quot;student&quot;, &quot;teacher&quot;, max_age=3600)</span></span><br><span class="line"><span class="string">2.获取cookie</span></span><br><span class="line"><span class="string">  获取cookie，通过request.cookies的方式，返回的是一个字典，可以获取字典里的相应的值</span></span><br><span class="line"><span class="string">  cookie_1 = request.cookies.get(&quot;student&quot;)</span></span><br><span class="line"><span class="string">3.删除cookie</span></span><br><span class="line"><span class="string">    这里的删除只是让cookie过期，并不是直接删除cookie</span></span><br><span class="line"><span class="string">    删除cookie，通过delete_cookie()的方式， 里面是cookie的名字</span></span><br><span class="line"><span class="string"> resp = make_response(&quot;del success&quot;)  # 设置响应体</span></span><br><span class="line"><span class="string"> resp.delete_cookie(&quot;student&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_cookies&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_cookies</span>():</span></span><br><span class="line">    r = make_response(<span class="string">&#x27;这是一个设置cookies的页面&#x27;</span>)</span><br><span class="line">    r.set_cookie(<span class="string">&#x27;student&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,max_age = <span class="number">3600</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_cookies&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookies</span>():</span></span><br><span class="line">    <span class="keyword">return</span> request.cookies.get(<span class="string">&#x27;student&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete_cookies&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_cookies</span>():</span></span><br><span class="line">    r = make_response(<span class="string">&#x27;这是一个删除cookies的页面&#x27;</span>)</span><br><span class="line">    r.delete_cookie(<span class="string">&#x27;student&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="string">&#x27;8&#x27;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="9-Flask-会话"><a href="#9-Flask-会话" class="headerlink" title="9.Flask_会话"></a>9.Flask_会话</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request,session,redirect,url_for</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">与Cookie不同，Session（会话）数据存储在服务器上。会话是客户端登录到服务器并注销服务器的时间间隔。</span></span><br><span class="line"><span class="string">需要在该会话中保存的数据会存储在服务器上的临时目录中。</span></span><br><span class="line"><span class="string">为每个客户端的会话分配会话ID。会话数据存储在cookie的顶部，服务器以加密方式对其进行签名。</span></span><br><span class="line"><span class="string">对于此加密，Flask应用程序需要一个定义的SECRET_KEY。</span></span><br><span class="line"><span class="string">Session对象也是一个字典对象，包含会话变量和关联值的键值对。</span></span><br><span class="line"><span class="string">例如，要设置一个&#x27;username&#x27;会话变量，请使用以下语句：</span></span><br><span class="line"><span class="string">Session[‘username’] = ’admin’</span></span><br><span class="line"><span class="string">要释放会话变量，请使用pop()方法。</span></span><br><span class="line"><span class="string">session.pop(&#x27;username&#x27;, None)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#secret_key的值可以随意设置</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;asdjhuiokmhfigjhu&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        username = session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="comment">#&lt;br /&gt;和&lt;br&gt;都代表换行，&lt;b&gt;代表字体加粗，&lt;a href = &#x27;url&#x27;&gt;</span></span><br><span class="line">        <span class="comment">#其中，&lt;a&gt;代表插入超链接，url代表链接，可以是任何超链接</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录用户名：&#x27;</span> + username + <span class="string">&#x27;&lt;br /&gt;&#x27;</span> + \</span><br><span class="line">            <span class="string">&#x27;&lt;b&gt;&lt;a href = &quot;/logout&quot;&gt;点击这里注销&lt;/a&gt;&lt;/b&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;您暂未登录&lt;br&gt;&lt;b&gt;&lt;a href = &quot;/login&quot;&gt;点击这里登录&lt;/a&gt;&lt;/b&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods = [<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username_u&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="comment">#不论前面的if是否执行，下面的return依然执行，并且输入固定值或格式，其中&lt;p&gt;代表段落</span></span><br><span class="line">    <span class="comment">#action=&#x27;&#x27;代表不进行跳转，依然停留在本页，可以改写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;form action = &#x27;&#x27; method = &#x27;post&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;请输入用户名：&lt;input type = &#x27;text&#x27; name = &#x27;username_u&#x27;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;input type = &#x27;submit&#x27; value = &#x27;登录&#x27;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="string">&#x27;90&#x27;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="10-Flask-消息闪现"><a href="#10-Flask-消息闪现" class="headerlink" title="10.Flask_消息闪现"></a>10.Flask_消息闪现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,flash,redirect,render_template,request,url_for</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">一个好的基于 GUI 的应用程序会向用户提供有关交互的反馈。在 Flask Web 应用程序中生成这样的信息性消息很容易。</span></span><br><span class="line"><span class="string">Flask 框架的闪现系统可以在一个视图中创建消息，并在名为 next 的视图函数中呈现它。</span></span><br><span class="line"><span class="string">Flask 模块包含 flash() 方法。它将消息传递给下一个请求，该请求通常是一个模板。</span></span><br><span class="line"><span class="string">flash(message, category),其中，message 参数是要闪现的实际消息。</span></span><br><span class="line"><span class="string">category 参数是可选的。它可以是“error”，“info”或“warning”。</span></span><br><span class="line"><span class="string">为了从会话中删除消息，模板调用 get_flashed_messages()。</span></span><br><span class="line"><span class="string">get_flashed_messages(with_categories, category_filter)</span></span><br><span class="line"><span class="string">两个参数都是可选的。如果接收到的消息具有类别，则第一个参数是元组。第二个参数仅用于显示特定消息。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">&#x27;tem&#x27;</span>)</span><br><span class="line">app.secret_key = <span class="string">&#x27;random string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;10.index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods = [<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    user = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    pwd = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>] != user <span class="keyword">or</span> request.form[<span class="string">&#x27;password&#x27;</span>] != pwd:</span><br><span class="line">            error = <span class="string">&#x27;无效的用户名和密码，请再次尝试！&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&#x27;您已成功登录！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;10.login.html&#x27;</span>,error = error)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="string">&#x27;10&#x27;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬豆瓣升级版～</title>
      <link href="2021/06/09/%E7%88%AC%E8%B1%86%E7%93%A3%E5%8D%87%E7%BA%A7%E7%89%88%EF%BD%9E/"/>
      <url>2021/06/09/%E7%88%AC%E8%B1%86%E7%93%A3%E5%8D%87%E7%BA%A7%E7%89%88%EF%BD%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="这次写的爬虫，爬取了更多的信息，并保存在了excel表格中，更加实用哦～"><a href="#这次写的爬虫，爬取了更多的信息，并保存在了excel表格中，更加实用哦～" class="headerlink" title="这次写的爬虫，爬取了更多的信息，并保存在了excel表格中，更加实用哦～"></a>这次写的爬虫，爬取了更多的信息，并保存在了excel表格中，更加实用哦～</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests,xlwt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line">wb = openpyxl.Workbook()</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">movie_list=[]</span><br><span class="line">rank_list=[]</span><br><span class="line">watched_list=[]</span><br><span class="line">words_list=[]</span><br><span class="line">director_list=[]</span><br><span class="line">year_list=[]</span><br><span class="line">country_list=[]</span><br><span class="line">plot_list=[]</span><br><span class="line">link_list=[]</span><br><span class="line">a,b,c,d,e,f,g,h,ii,j=-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span></span><br><span class="line">cnt=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">deep=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_movies</span>():</span></span><br><span class="line">    <span class="keyword">global</span> movie_list,director_list,country_list,plot_list,words_list,watched_list,link_list</span><br><span class="line">    <span class="keyword">global</span> a,b,c,d,e,f,g,h,ii,j,cnt</span><br><span class="line">    headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span> : <span class="string">&#x27;movie.douban.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,deep):</span><br><span class="line">        link=<span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span>+<span class="built_in">str</span>(<span class="number">25</span>*i) + <span class="string">&#x27;&amp;filter=&#x27;</span></span><br><span class="line">        r=requests.get(link,headers=headers,timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在爬取第&quot;</span>,<span class="built_in">str</span>(i+<span class="number">1</span>),<span class="string">&quot;页 状态码：&quot;</span>,r.status_code)</span><br><span class="line">        <span class="comment">#print(r.text)</span></span><br><span class="line">        soup=BeautifulSoup(r.text,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">########################################## 电影名称</span></span><br><span class="line">        div_list=soup.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;hd&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> div_list:</span><br><span class="line">            movie=each.a.span.text.strip()</span><br><span class="line">            movie_list.append(movie)</span><br><span class="line">            <span class="built_in">print</span>(movie)</span><br><span class="line">            b=<span class="built_in">max</span>(b,<span class="built_in">len</span>(movie))          <span class="comment">#记录电影名称长度最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">########################################## 简语</span></span><br><span class="line">        w = soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;bd&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">26</span>):</span><br><span class="line"></span><br><span class="line">            temp=<span class="built_in">str</span>(w[k])</span><br><span class="line">            pos=temp.find(<span class="string">&#x27;&#x27;&#x27;&lt;span class=&quot;inq&quot;&gt;&#x27;&#x27;&#x27;</span>)</span><br><span class="line">            <span class="comment"># print(k,&quot; &quot;,pos)</span></span><br><span class="line">            <span class="keyword">if</span> pos!=-<span class="number">1</span>:</span><br><span class="line">                pos2=temp.find(<span class="string">&quot;&lt;/span&gt;&quot;</span>,pos)</span><br><span class="line">                words_list.append(temp[pos+<span class="number">18</span>:pos2:])</span><br><span class="line">                ii=<span class="built_in">max</span>(ii,pos2-pos)</span><br><span class="line">                <span class="comment">#print(temp[pos+18:pos2:])</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                words_list.append(<span class="string">&quot;无&quot;</span>)</span><br><span class="line">                <span class="comment">#print(&quot;无&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">########################################## 导演和演员、年份、国家、类别</span></span><br><span class="line">        bd_list=soup.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;bd&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> bd_list:</span><br><span class="line"></span><br><span class="line">            director=i.p.text.strip()</span><br><span class="line">            Str=director</span><br><span class="line"></span><br><span class="line">            pos=-<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(Str)):</span><br><span class="line">                <span class="keyword">if</span> Str[i]==<span class="string">&#x27;1&#x27;</span> <span class="keyword">or</span> Str[i]==<span class="string">&#x27;2&#x27;</span>: <span class="comment">#年份</span></span><br><span class="line">                    pos=i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            director=director[<span class="number">0</span>:pos:] <span class="comment">#去除尾部</span></span><br><span class="line">            year=Str[pos:pos+<span class="number">4</span>:] <span class="comment">#年份</span></span><br><span class="line"></span><br><span class="line">            Str=Str[pos+<span class="number">6</span>::]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(Str)):</span><br><span class="line">                <span class="keyword">if</span> Str[i]==<span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    pos=i</span><br><span class="line"></span><br><span class="line">            country=Str[:pos:] <span class="comment">#国家</span></span><br><span class="line">            plot=Str[pos+<span class="number">1</span>::] <span class="comment">#类别</span></span><br><span class="line"></span><br><span class="line">            country_list.append(country)</span><br><span class="line">            director_list.append(director)</span><br><span class="line">            year_list.append(year)</span><br><span class="line">            plot_list.append(plot)</span><br><span class="line"></span><br><span class="line">            e = <span class="built_in">max</span>(e, <span class="built_in">len</span>(country)) <span class="comment">#同理，记录最大长度</span></span><br><span class="line">            c = <span class="built_in">max</span>(c, <span class="built_in">len</span>(director))</span><br><span class="line">            d = <span class="built_in">max</span>(d, <span class="built_in">len</span>(year))</span><br><span class="line">            f = <span class="built_in">max</span>(f, <span class="built_in">len</span>(plot))</span><br><span class="line"></span><br><span class="line">        <span class="comment">########################################## 评分、已看人数</span></span><br><span class="line">        star_list = soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;star&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> star_list:</span><br><span class="line">            strs=<span class="built_in">str</span>(each)</span><br><span class="line">            <span class="keyword">if</span> strs.find(<span class="string">&quot;average&quot;</span>)!=-<span class="number">1</span>:</span><br><span class="line">                pos=strs.find(<span class="string">&quot;average&quot;</span>)</span><br><span class="line">                rank=strs[pos+<span class="number">9</span>:pos+<span class="number">12</span>:]</span><br><span class="line">                rank_list.append(rank) <span class="comment">#评分</span></span><br><span class="line">                g = <span class="built_in">max</span>(g, <span class="built_in">len</span>(rank))</span><br><span class="line">                <span class="comment">#print(rank)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> strs.find(<span class="string">&quot;&lt;span&gt;&quot;</span>)!=-<span class="number">1</span>:</span><br><span class="line">                pos=strs.find(<span class="string">&quot;&lt;span&gt;&quot;</span>)</span><br><span class="line">                pos2=strs.find(<span class="string">&quot;人&quot;</span>)</span><br><span class="line">                watched=strs[pos+<span class="number">6</span>:pos2:]</span><br><span class="line">                watched_list.append(watched) <span class="comment">#已看人数</span></span><br><span class="line">                h = <span class="built_in">max</span>(h, <span class="built_in">len</span>(watched))</span><br><span class="line">                <span class="comment">#print(watched)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">########################################## 链接</span></span><br><span class="line">        links= soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;pic&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> links:</span><br><span class="line">            link=each.a.attrs[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">            link_list.append(link)</span><br><span class="line">            j=<span class="built_in">max</span>(j,<span class="built_in">len</span>(link))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">########################################## 写入表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sheet</span>():</span></span><br><span class="line">    <span class="keyword">global</span> movie_list,director_list,year_list,country_list,plot_list,words_list,watched_list</span><br><span class="line"></span><br><span class="line">    wb.create_sheet(index=<span class="number">0</span>, title=<span class="string">&quot;douban&quot;</span>)</span><br><span class="line">    sheet=wb.active</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sheet.column_dimensions[<span class="string">&#x27;A&#x27;</span>].width = <span class="number">5</span></span><br><span class="line">    sheet.column_dimensions[<span class="string">&#x27;B&#x27;</span>].width = b*<span class="number">2</span>+<span class="number">5</span> <span class="comment">#根据实际情况调整</span></span><br><span class="line">    sheet.column_dimensions[<span class="string">&#x27;C&#x27;</span>].width = c-<span class="number">5</span></span><br><span class="line">    sheet.column_dimensions[<span class="string">&#x27;D&#x27;</span>].width = d+<span class="number">3</span></span><br><span class="line">    sheet.column_dimensions[<span class="string">&#x27;E&#x27;</span>].width = e</span><br><span class="line">    sheet.column_dimensions[<span class="string">&#x27;F&#x27;</span>].width = f*<span class="number">2</span>+<span class="number">3</span></span><br><span class="line">    sheet.column_dimensions[<span class="string">&#x27;G&#x27;</span>].width = g+<span class="number">5</span></span><br><span class="line">    sheet.column_dimensions[<span class="string">&#x27;H&#x27;</span>].width = h+<span class="number">5</span></span><br><span class="line">    sheet.column_dimensions[<span class="string">&#x27;I&#x27;</span>].width = ii*<span class="number">2</span>-<span class="number">5</span></span><br><span class="line">    sheet.column_dimensions[<span class="string">&#x27;j&#x27;</span>].width = j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    row0 = [<span class="string">u&#x27;排名&#x27;</span>, <span class="string">u&#x27;影名&#x27;</span>,<span class="string">u&#x27;主演&#x27;</span>,<span class="string">u&#x27;年份&#x27;</span>,<span class="string">u&#x27;国家&#x27;</span>,<span class="string">u&#x27;类别&#x27;</span>,<span class="string">u&#x27;评分&#x27;</span>,<span class="string">u&#x27;已看人数&#x27;</span>,<span class="string">u&#x27;简语&#x27;</span>,<span class="string">u&#x27;链接&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(row0)+<span class="number">1</span>):</span><br><span class="line">        sheet.cell(<span class="number">1</span>, i).value = row0[i-<span class="number">1</span>] <span class="comment">#表格第一行：排名、影名、主演。。。</span></span><br><span class="line"></span><br><span class="line">    t=<span class="number">0</span></span><br><span class="line">    <span class="comment">########################################## 按行写入</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(movie_list)+<span class="number">2</span>):</span><br><span class="line">        sheet.cell(i,<span class="number">1</span>).value=<span class="built_in">str</span>(i-<span class="number">1</span>)</span><br><span class="line">        sheet.cell(i,<span class="number">2</span>).value=movie_list[i-<span class="number">2</span>]</span><br><span class="line">        sheet.cell(i, <span class="number">7</span>, rank_list[i - <span class="number">2</span>])</span><br><span class="line">        sheet.cell(i, <span class="number">8</span>, watched_list[i - <span class="number">2</span>])</span><br><span class="line">        sheet.cell(i, <span class="number">9</span>, words_list[i - <span class="number">2</span>])  <span class="comment">#</span></span><br><span class="line">        sheet.cell(i, <span class="number">10</span>, link_list[i - <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> director_list[i+t-<span class="number">1</span>]==<span class="string">&quot;豆&quot;</span>: <span class="comment">#调整瑕疵</span></span><br><span class="line">            t=t+<span class="number">1</span></span><br><span class="line">        sheet.cell(i,<span class="number">3</span>,director_list[i+t-<span class="number">1</span>])</span><br><span class="line">        sheet.cell(i,<span class="number">4</span>,year_list[i+t-<span class="number">1</span>])</span><br><span class="line">        sheet.cell(i,<span class="number">5</span>,country_list[i+t-<span class="number">1</span>])</span><br><span class="line">        sheet.cell(i,<span class="number">6</span>,plot_list[i+t-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    wb.save(<span class="string">&#x27;豆瓣排名.xls&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;********\n爬取完成！\n豆瓣排名.xls已保存在同目录文件夹下！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> deep</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;爬取豆瓣电影 Top 250&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入搜索深度（1～10）&quot;</span>)</span><br><span class="line">    deep=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    ans = deep*<span class="number">25</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;将爬取&quot;</span>,ans,<span class="string">&quot;行信息，请稍后。。。&quot;</span>)</span><br><span class="line">    get_movies()</span><br><span class="line">    sheet()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS算法学习和练习</title>
      <link href="2021/06/03/DFS%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0/"/>
      <url>2021/06/03/DFS%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DFS-深度优先搜索"><a href="#DFS-深度优先搜索" class="headerlink" title="DFS(深度优先搜索)"></a>DFS(深度优先搜索)</h1><h2 id="DFS学习"><a href="#DFS学习" class="headerlink" title="DFS学习"></a>DFS学习</h2><p>（等待更新）</p><h2 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h2><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a><a href="https://www.lanqiao.cn/problems/641/learning/">例题1</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</p><p>X 星球的一处迷宫游乐场建在某个小山坡上。 它是由10*10个相互连通的小房间组成的。</p><p>房间的地板上写着一个很大的字母。 我们假设玩家是面朝上坡的方向站立，则： LL 表示走到左边的房间， RR 表示走到右边的房间， UU 表示走到上坡方向的房间， DD 表示走到下坡方向的房间。</p><p>X 星球的居民有点懒，不愿意费力思考。 他们更喜欢玩运气类的游戏。这个游戏也是如此！</p><p>开始的时候，直升机把 100 名玩家放入一个个小房间内。 玩家一定要按照地上的字母移动。</p><p>迷宫地图如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">UDDLUULRUL</span><br><span class="line">UURLLLRRRU</span><br><span class="line">RRUURLDLRD</span><br><span class="line">RUDDDDUUUU</span><br><span class="line">URUDLLRRUU</span><br><span class="line">DURLRLDLRL</span><br><span class="line">ULLURLLRDU</span><br><span class="line">RDLULLRDDD</span><br><span class="line">UUDDUDUDLL</span><br><span class="line">ULRDLUURRR</span><br></pre></td></tr></table></figure><p>请你计算一下，最后，有多少玩家会走出迷宫，而不是在里边兜圈子？</p><p>如果你还没明白游戏规则，可以参看下面一个简化的4x4迷宫的解说图：<br><img src="https://user-images.githubusercontent.com/79883276/120579207-b69fee00-c459-11eb-836d-15910f9ec7ab.png" alt="migong"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>为什么这道题可以用DFS，可不可以用BFS呢？<br>按照题意，从某个房间出发，只走没走过的地方，如果已经无路可走了就说明走不出迷宫，会在里面兜圈子。<br>BFS和DFS都可以找出这条行走的路径，只要判断这条路径有没有接触到迷宫的上下左右四个边界以外的地方即可（递归边界）<br>我们的解题思路也很简单<br>对每一个房间都进行一次DFS<br>如果能走通，就记录一下，最后输出答案即可  </p><p>答案：31</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">char</span> g[<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">12</span>][<span class="number">12</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;<span class="number">10</span>||y&lt;<span class="number">1</span>||y&gt;<span class="number">10</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(vis[x][y]==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">vis[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(g[x][y]==<span class="string">&#x27;U&#x27;</span>) <span class="built_in">dfs</span>(x<span class="number">-1</span>,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(g[x][y]==<span class="string">&#x27;D&#x27;</span>) <span class="built_in">dfs</span>(x+<span class="number">1</span>,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(g[x][y]==<span class="string">&#x27;L&#x27;</span>) <span class="built_in">dfs</span>(x,y<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(g[x][y]==<span class="string">&#x27;R&#x27;</span>) <span class="built_in">dfs</span>(x,y+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">11</span>;j++)<span class="comment">//读者也可以用scanf(&quot;%s&quot;,g[i]),但下标是从0开始的</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;g[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//dfs</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dfs</span>(i,j)) ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label red">注意</mark> :  <p>1.每一次dfs一个房间之前都要将vis数组初始化<br>2.使用c语言进行存储char类型的图时，注意每一行都有一个换行符需要读入</p><p>ps: 这道题也是可以用bfs做的，读者可以比较他们的区别  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">char</span> g[<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">12</span>][<span class="number">12</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">Node start=&#123;x,y&#125;;</span><br><span class="line">queue&lt;Node&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">Node now=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">int</span> nowx=now.x;</span><br><span class="line"><span class="keyword">int</span> nowy=now.y;</span><br><span class="line"><span class="keyword">if</span>(nowx&lt;<span class="number">1</span>||nowx&gt;<span class="number">10</span>||nowy&lt;<span class="number">1</span>||nowy&gt;<span class="number">10</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(vis[nowx][nowy]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">vis[nowx][nowy]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(g[nowx][nowy]==<span class="string">&#x27;U&#x27;</span>) q.<span class="built_in">push</span>(Node&#123;nowx<span class="number">-1</span>,nowy&#125;);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(g[nowx][nowy]==<span class="string">&#x27;D&#x27;</span>) q.<span class="built_in">push</span>(Node&#123;nowx+<span class="number">1</span>,nowy&#125;);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(g[nowx][nowy]==<span class="string">&#x27;L&#x27;</span>) q.<span class="built_in">push</span>(Node&#123;nowx,nowy<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(g[nowx][nowy]==<span class="string">&#x27;R&#x27;</span>) q.<span class="built_in">push</span>(Node&#123;nowx,nowy+<span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">11</span>;j++)</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;g[i][j]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)&#123;</span><br><span class="line"> <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">bfs</span>(i,j)) &#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python做一个简单的词云</title>
      <link href="2021/05/27/Python%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%8D%E4%BA%91/"/>
      <url>2021/05/27/Python%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%8D%E4%BA%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>在几个月前，当我看到秀明老师做的红楼梦词频统计，利用python统计人物姓名出现的次数，出现在哪一章节，从而更好的分析红楼梦的时候，我就对Python产生了浓厚的兴趣，这两天，福海在网上找资料，把词云给做出来了，我一看，嚯嚯，代码也就几十行，理解起来没有什么难度，今天就给大家分享一下，制作一个简单的词云图的步骤吧！</p><h2 id="操作环境：-win10"><a href="#操作环境：-win10" class="headerlink" title="操作环境： win10"></a>操作环境： win10</h2><h2 id="Python版本：3-8"><a href="#Python版本：3-8" class="headerlink" title="Python版本：3.8 "></a>Python版本：3.8 <mark class="hl-label red">Python3.9可能不行</mark> </h2><p><strong>首先需要导入以下几个库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> jieba</span><br></pre></td></tr></table></figure><mark class="hl-label red">注意</mark> : wordcloud库安装可能会出现问题<p><strong>我的解决办法是：</strong><br><strong>先在这个网站上下载.whl文件<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud">点击下载</a><br>python3.8 对应 cp38<br>下载即可<br>下载完成之后，在命令行中输入 where python<br>将刚下载好的文件 拷贝到 python安装目录</strong><br><img src="https://user-images.githubusercontent.com/79883276/119790190-4dbef000-bf06-11eb-8a31-fc4260216bbf.jpg" alt="SharedScreenshot"><br><strong>在命令行中输入<br>pip install “你的刚才拷贝的文件的目录，不包含引号”<br>例如我的</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install C:\Users\ZZYGOGOGO\AppData\Local\Programs\Python\Python38\wordcloud-1.8.1-cp38-cp38-win_amd64.whl  </span><br></pre></td></tr></table></figure><p>__其他的库安装起来都很容易，如果你用pycharm，在左上角File–&gt;Settings中即可添加<br><img src="https://user-images.githubusercontent.com/79883276/119792106-02a5dc80-bf08-11eb-9299-ea32d0bf1b76.jpg" alt="jk"><br> <strong>词云生成的字需要安装字体文件,<br> 1，<a href="https://github.com/ZZYGOGOGO/File/archive/refs/heads/main.zip">下载</a><br> 2，将下载好的字体文件 复制到 系统盘windows/fonts中</strong></p><h2 id="为了避免统计一些类如-他、的、走、啊这样的无关词语，我们可以加入停用词库"><a href="#为了避免统计一些类如-他、的、走、啊这样的无关词语，我们可以加入停用词库" class="headerlink" title="为了避免统计一些类如 他、的、走、啊这样的无关词语，我们可以加入停用词库"></a>为了避免统计一些类如 他、的、走、啊这样的无关词语，我们可以加入停用词库</h2><h3 id="停用词下载"><a href="#停用词下载" class="headerlink" title="停用词下载"></a>停用词下载</h3><p> 在刚才下载的文件中找到stopwords<br>下面给出代码，你只要修改文件读入的路径，以及生成的词云的结果路径即可__</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;C://Users//ZZYGOGOGO//Desktop/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文本</span></span><br><span class="line">text = <span class="built_in">open</span>(path + <span class="string">&#x27;西游记.txt&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">text=<span class="string">&#x27; &#x27;</span>.join(jieba.cut(text))</span><br><span class="line"></span><br><span class="line">stop_words=<span class="built_in">set</span>()</span><br><span class="line">content = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;baidu_stopwords.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>).readlines()]</span><br><span class="line">stop_words.update(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成对象</span></span><br><span class="line">wc = WordCloud(font_path=<span class="string">&#x27;C:\Windows\Fonts\simhei.ttf&#x27;</span>,width=<span class="number">1280</span>, height=<span class="number">800</span>, mode=<span class="string">&#x27;RGBA&#x27;</span>, background_color=<span class="literal">None</span>,stopwords=stop_words).generate(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示词云</span></span><br><span class="line">plt.imshow(wc,interpolation=<span class="string">&#x27;bilinear&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">wc.to_file(path + <span class="string">&#x27;/wordcloud.png&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python - 词云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本数据结构复习</title>
      <link href="2021/05/23/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
      <url>2021/05/23/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-容器"><a href="#1-容器" class="headerlink" title="1. 容器"></a>1. 容器</h1><p>STL容器分为两种</p><h3 id="1-1-顺序式容器"><a href="#1-1-顺序式容器" class="headerlink" title="1.1. 顺序式容器"></a>1.1. 顺序式容器</h3><pre><code>    - vector    - stack    - queue    - priority_queue    - list    - deque (双向列表)</code></pre><h3 id="1-2-关联式容器"><a href="#1-2-关联式容器" class="headerlink" title="1.2. 关联式容器"></a>1.2. 关联式容器</h3><pre><code>    - set    - multiset    - map    - multimap</code></pre><h1 id="2-1-vector"><a href="#2-1-vector" class="headerlink" title="2.1 vector"></a>2.1 vector</h1><p>在竞赛中，若内存空间足够，则使用普通的静态数组，否则可以使用vector动态数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">定义<span class="keyword">int</span>型数组： </span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">vector也可以定义二维数组，读者可查找资料，</span><br><span class="line">我们可以定义结构体配合vector使用，如</span><br><span class="line">Dijkstra算法中：</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> from,to,w;</span><br><span class="line">&#125;; </span><br><span class="line">vector&lt;Edge&gt; e[num];</span><br><span class="line"></span><br><span class="line">定义string型数组：</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>,<span class="string">&quot;null&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">定义结构体数组：</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span> <span class="keyword">int</span> x,y;&#125;;</span><br><span class="line">vector&lt;point&gt; a; </span><br><span class="line"></span><br><span class="line">常用操作：</span><br><span class="line">赋值：a.<span class="built_in">push_back</span>(x); <span class="comment">//在尾部添加元素 </span></span><br><span class="line">元素个数：a.<span class="built_in">size</span>();</span><br><span class="line">判空：<span class="keyword">bool</span> isEmpty=a.<span class="built_in">empty</span>(); </span><br><span class="line">打印：和普通数组一样的索引 cout&lt;&lt;a[<span class="number">0</span>]</span><br><span class="line">删除尾部：a.<span class="built_in">pop_back</span>();</span><br><span class="line">删除元素：a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>()+<span class="number">2</span>);</span><br><span class="line">清空： a.<span class="built_in">clear</span>();</span><br><span class="line">翻转： <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">排序：<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯真题：玩具蛇</title>
      <link href="2021/05/23/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%EF%BC%9A%E7%8E%A9%E5%85%B7%E8%9B%87(DFS)/"/>
      <url>2021/05/23/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%EF%BC%9A%E7%8E%A9%E5%85%B7%E8%9B%87(DFS)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近备战蓝桥杯国赛，方法就是刷真题，今天做了一道BFS题和一道DFS题，都比较简单，适合有一定DFS、BFS基础的读者阅读。</p><h3 id="试题-E-玩具蛇"><a href="#试题-E-玩具蛇" class="headerlink" title="试题 E: 玩具蛇"></a>试题 E: 玩具蛇</h3><h6 id="本题总分：15-分"><a href="#本题总分：15-分" class="headerlink" title="本题总分：15 分"></a>本题总分：15 分</h6><h3 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><p>小蓝有一条玩具蛇，一共有 16 节，上面标着数字 1 至 16。每一节都是一个正方形的形状。相邻的两节可以成直线或者成 90 度角。小蓝还有一个 4 × 4 的方格盒子，用于存放玩具蛇，盒子的方格上依次标着字母 A 到 P 共 16 个字母。小蓝可以折叠自己的玩具蛇放到盒子里面。他发现，有很多种方案可以将玩具蛇放进去。<br>下图给出了两种方案：<br><img src="https://user-images.githubusercontent.com/79883276/119254674-37552380-bbea-11eb-81c8-0c96dca371e0.jpg" alt="SharedScreenshot"></p><p>请帮小蓝计算一下，总共有多少种不同的方案。如果两个方案中，存在玩<br>具蛇的某一节放在了盒子的不同格子里，则认为是不同的方案。</p><h4 id="【答案提交】"><a href="#【答案提交】" class="headerlink" title="【答案提交】"></a>【答案提交】</h4><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><mark class="hl-label blue">思路分析：</mark> <p>题意解读：十六个格子，蛇头相当于是起点，那么就有16个起点，从起点出发，再走十五步，要求这十五步必须是连续的而且不能重复，且都在这个正方形中，有多少种走法？<br>那么我们可以联想到经典的走迷宫问题，这里给出DFS的做法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;<span class="number">4</span>||y&lt;<span class="number">1</span>||y&gt;<span class="number">4</span>) <span class="keyword">return</span>;<span class="comment">//递归边界 </span></span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">16</span>) &#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u=x+dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> v=y+dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(vis[u][v]==<span class="number">0</span>)&#123;<span class="comment">//如果这个位置没有走过 </span></span><br><span class="line">vis[u][v]=<span class="number">1</span>;<span class="comment">//那就标记这个地方走过了 </span></span><br><span class="line"><span class="built_in">dfs</span>(u,v,d+<span class="number">1</span>);<span class="comment">//从这个地方开始，走下一步 </span></span><br><span class="line"><span class="comment">//主要一定要写d+1，而不是++d或者d++ </span></span><br><span class="line">vis[u][v]=<span class="number">0</span>;<span class="comment">//从这个位置出发的结果已经算完了，</span></span><br><span class="line"><span class="comment">//清除标记，进入下一层循环，从其他位置开始走 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));<span class="comment">//每次dfs前都要初始化标记数组 </span></span><br><span class="line">vis[i][j]=<span class="number">1</span>;<span class="comment">//标记起点为已经走过 </span></span><br><span class="line"><span class="built_in">dfs</span>(i,j,<span class="number">1</span>);<span class="comment">//起点已经走过，代表第一节 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 真题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯真题：扩散</title>
      <link href="2021/05/23/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%EF%BC%9A%E6%89%A9%E6%95%A3(BFS)/"/>
      <url>2021/05/23/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%EF%BC%9A%E6%89%A9%E6%95%A3(BFS)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天写的第二道题也是用到了搜索技术<br>话不多说，直接看题：</p><h2 id="试题-B-扩散"><a href="#试题-B-扩散" class="headerlink" title="试题 B: 扩散"></a>试题 B: 扩散</h2><h5 id="本题总分：5-分"><a href="#本题总分：5-分" class="headerlink" title="本题总分：5 分"></a>本题总分：5 分</h5><h3 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><p>小蓝在一张无限大的特殊画布上作画。这张画布可以看成一个方格图，每个格子可以用一个二维的整数坐标表示。小蓝在画布上首先点了一下几个点：<br>(0, 0), (2020, 11), (11, 14), (2000, 2000)。<br>只有这几个格子上有黑色，其它位置都是白色的。每过一分钟，黑色就会扩散一点。具体的，如果一个格子里面是黑色，它就会扩散到上、下、左、右四个相邻的格子中，使得这四个格子也变成黑色（如果原来就是黑色，则还是黑色）。</p><h3 id="请问，经过-2020-分钟后，画布上有多少个格子是黑色的。"><a href="#请问，经过-2020-分钟后，画布上有多少个格子是黑色的。" class="headerlink" title="请问，经过 2020 分钟后，画布上有多少个格子是黑色的。"></a>请问，经过 2020 分钟后，画布上有多少个格子是黑色的。</h3><h3 id="【答案提交】"><a href="#【答案提交】" class="headerlink" title="【答案提交】"></a>【答案提交】</h3><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一<br>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><p>读者可以自行尝试做下本题，思路和题解在下方。<br>#############################################<br><img src="https://user-images.githubusercontent.com/79883276/119222766-889cde80-bb28-11eb-8de4-372c0cb807a5.JPG" alt="IMG_4050(20210516-232732)"><br>#############################################</p><h3 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h3><p>1.我们可以用结构体记录每一个点的坐标以及这个点扩散的时间。<br>2.考虑到，2020分钟后，某些点的坐标x,y可能为负数，而负数是不能作为数组下标的，那么我们可以把每个起点的横竖坐标都加上2020。</p><h3 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h3><p>在思路一中，提到的负数坐标，是无法作为vis标记数组的下标，但是在一的结构体中，我们可以设置变量x，表示该点是否扩散过。</p><mark class="hl-label red">本题采用BFS算法，需要注意的是，起点有四个，我们要把这四个坐标都加入到队列中去。</mark> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">2020</span>,<span class="number">2020</span>&#125;,&#123;<span class="number">4040</span>,<span class="number">2031</span>&#125;,&#123;<span class="number">2031</span>,<span class="number">2034</span>&#125;,&#123;<span class="number">4020</span>,<span class="number">4020</span>&#125;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,step=<span class="number">0</span>;</span><br><span class="line">&#125;; </span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">7000</span>][<span class="number">7000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">queue&lt;node&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">node now=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">node next;</span><br><span class="line">next.x=now.x+dir[i][<span class="number">0</span>];</span><br><span class="line">next.y=now.y+dir[i][<span class="number">1</span>];</span><br><span class="line">next.step=now.step+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(vis[next.x][next.y]==<span class="number">0</span>&amp;&amp;next.step&lt;=<span class="number">2020</span>)&#123;</span><br><span class="line">vis[next.x][next.y]=<span class="number">1</span>;</span><br><span class="line">ans++;</span><br><span class="line">q.<span class="built_in">push</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> stx,<span class="keyword">int</span> sty)</span></span>&#123;</span><br><span class="line">node start;</span><br><span class="line">start.x=stx;</span><br><span class="line">start.y=sty;</span><br><span class="line">start.step=<span class="number">0</span>;</span><br><span class="line">vis[start.x][start.y]=<span class="number">1</span>;</span><br><span class="line">    ans++;<span class="comment">//在答案中加入起点</span></span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="built_in">init</span>(pos[i][<span class="number">0</span>],pos[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bfs</span>();</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 真题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树之kruskal算法</title>
      <link href="2021/05/21/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E4%B9%8Bkruskal%E7%AE%97%E6%B3%95/"/>
      <url>2021/05/21/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E4%B9%8Bkruskal%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><mark class="hl-label blue">对比</mark> <p>相较与Prim算法，Kruskal算法编码更加简单！它有两个关键技术：<br>①把边的长度按从小到大进行排序<br>②判断圈：即处理连通性问题，可以用并查集处理</p><mark class="hl-label green">算法原理</mark> <p>对边进行贪心操作。从最短的边开始，把它加入到T中；在剩下的边中继续寻找最短的边，并加入到T中，重复这个过程，直到所有的点都已加入到T中。</p><p><img src="https://user-images.githubusercontent.com/79883276/119092831-80b63f00-ba41-11eb-9752-e15098dad607.png" alt="FE6891A2F5B8976A0B8309E76BCF1890"></p><p>和Prim算法类似，在这个过程中，我们需要判断是否形成了圈。<br>例题<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1233">hdu 1233</a></p><h3 id="还是畅通工程"><a href="#还是畅通工程" class="headerlink" title="还是畅通工程"></a>还是畅通工程</h3><h6 id="Time-Limit-4000-2000-MS-Java-Others-Memory-Limit-65536-32768-K-Java-Others"><a href="#Time-Limit-4000-2000-MS-Java-Others-Memory-Limit-65536-32768-K-Java-Others" class="headerlink" title="Time Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)"></a>Time Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</h6><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。<br>当N为0时，输入结束，该用例不被处理。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>对每个测试用例，在1行里输出最小的公路总长度。</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 1</span><br><span class="line">1 3 2</span><br><span class="line">2 3 4</span><br><span class="line">4</span><br><span class="line">1 2 1</span><br><span class="line">1 3 4</span><br><span class="line">1 4 1</span><br><span class="line">2 3 3</span><br><span class="line">2 4 2</span><br><span class="line">3 4 5</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> S[MAXN];<span class="comment">//并查集</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;<span class="comment">//u,v是村庄编号，w是距离 </span></span><br><span class="line">&#125;edge[MAXN]; </span><br><span class="line"><span class="comment">//int find(int u)&#123;</span></span><br><span class="line"><span class="comment">//while(u!=S[u]) &#123;</span></span><br><span class="line"><span class="comment">//u=S[u];//寻找祖先 </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> S[u]==u?u:<span class="built_in">find</span>(S[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) S[i]=i;<span class="comment">//并查集初始化</span></span><br><span class="line"><span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);<span class="comment">//存储的时候是从下标1开始的，所以这里+1 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;<span class="comment">//从小到大遍历m条边</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="built_in">find</span>(edge[i].u);</span><br><span class="line"><span class="keyword">int</span> b=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line"><span class="keyword">if</span>(a==b) <span class="keyword">continue</span>;<span class="comment">//两祖先相同，会形成圈，舍弃 </span></span><br><span class="line"><span class="keyword">else</span> S[a]=b; </span><br><span class="line">ans+=edge[i].w;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n),n)&#123;</span><br><span class="line">m=n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;edge[i].u,&amp;edge[i].v,&amp;edge[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;# %d\n&quot;</span>,<span class="built_in">kruskal</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题2："><a href="#例题2：" class="headerlink" title="例题2："></a>例题2：</h3><p>题目来源： PTA</p><h2 id="7-95-公路村村通-30-分"><a href="#7-95-公路村村通-30-分" class="headerlink" title="7-95 公路村村通 (30 分)"></a>7-95 公路村村通 (30 分)</h2><h3 id="现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。"><a href="#现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。" class="headerlink" title="现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。"></a>现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。</h3><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入数据包括城镇数目正整数N（≤1000）和候选道路数目M（≤3N）；随后的M行对应M条道路，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号以及该道路改建的预算成本。为简单起见，城镇从1到N编号。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>输出村村通需要的最低成本。如果输入数据不足以保证畅通，则输出−1，表示需要建设更多公路。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">6 15</span><br><span class="line">1 2 5</span><br><span class="line">1 3 3</span><br><span class="line">1 4 7</span><br><span class="line">1 5 4</span><br><span class="line">1 6 2</span><br><span class="line">2 3 4</span><br><span class="line">2 4 6</span><br><span class="line">2 5 2</span><br><span class="line">2 6 6</span><br><span class="line">3 4 6</span><br><span class="line">3 5 1</span><br><span class="line">3 6 1</span><br><span class="line">4 5 10</span><br><span class="line">4 6 8</span><br><span class="line">5 6 3</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><mark class="hl-label red">这道题考察的是最小生成树和并查集哦!</mark> <p>题解：用kruskal求解即可，另外要判断道路是否畅通可以用一个变量t，记录最小生成树的边数，最后判断一下，”边数是否等于点数减一“即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> S[<span class="number">1200</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x!=S[x]) x=S[x];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,w=INF;</span><br><span class="line">&#125;edge[<span class="number">3300</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) S[i]=i;</span><br><span class="line"><span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="built_in">find</span>(edge[i].x);</span><br><span class="line"><span class="keyword">int</span> b=<span class="built_in">find</span>(edge[i].y);</span><br><span class="line"><span class="keyword">if</span>(a!=b) &#123;</span><br><span class="line">S[a]=b;</span><br><span class="line">ans+=edge[i].w;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==n<span class="number">-1</span>)<span class="comment">//n个点，n-1条边 </span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">edge[i].x=a;</span><br><span class="line">edge[i].y=b;</span><br><span class="line">edge[i].w=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">kruskal</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树之Prim算法</title>
      <link href="2021/05/21/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E4%B9%8BPrim%E7%AE%97%E6%B3%95/"/>
      <url>2021/05/21/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E4%B9%8BPrim%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天介绍的算法是图论中的最小生成树，我们需要注意一下最小生成树和最短路径的区别：<br>最短路径是两点之间的距离最小，而最小生成树得到的是整个图的路径和最小</p><mark class="hl-label red">（但任意两点之间未必是最短路径！）</mark> <h4 id="下面介绍Prim算法。"><a href="#下面介绍Prim算法。" class="headerlink" title="下面介绍Prim算法。"></a>下面介绍Prim算法。</h4><mark class="hl-label red">适合稠密图、编码比kruskal稍难</mark> <p>对点进行贪心操作，从u开始，把u加入集合{},然后寻找距离集合{u}最近的v，加入集合{u},<br>接着寻找距离集合{u,v}最近的w，加入集合{u,v},重复此过程，将所有点都加入集合。<br>每加入一个点，都要判断是否形成了圈。</p><p><a href="https://pintia.cn/problem-sets/1337328863812022272/problems/1337329150421712896">例题7-95 公路村村通 (30 分)</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取豆瓣网排名前250的电影</title>
      <link href="2021/05/19/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%BD%91%E6%8E%92%E5%90%8D%E5%89%8D250%E7%9A%84%E7%94%B5%E5%BD%B1/"/>
      <url>2021/05/19/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%BD%91%E6%8E%92%E5%90%8D%E5%89%8D250%E7%9A%84%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>爬虫是一项很有用的技术，我们可以利用它在网络上搜集需要的信息，并对信息加以分析，得到我们想要的结果。现在，分享一个简单的爬虫程序，爬取豆瓣网排名前250的电影，它会生成一个文件和一个文件夹，保存排名信息。<br>先把代码贴出来，再慢慢分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">move_list=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_movies</span>():</span></span><br><span class="line">    <span class="keyword">global</span> move_list</span><br><span class="line">    headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span> : <span class="string">&#x27;movie.douban.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cn=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        link=<span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span>+<span class="built_in">str</span>(<span class="number">25</span>*i) + <span class="string">&#x27;&amp;filter=&#x27;</span></span><br><span class="line">        r=requests.get(link,headers=headers,timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>,<span class="built_in">str</span>(i+<span class="number">1</span>),<span class="string">&quot;页 状态码：&quot;</span>,r.status_code)</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line">        soup=BeautifulSoup(r.text,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        div_list=soup.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;hd&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> div_list:</span><br><span class="line">            move=each.a.span.text.strip()</span><br><span class="line">            move_list.append(move)</span><br><span class="line">            cn=cn+<span class="number">1</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;豆瓣排名前250名电影.txt&#x27;</span>,<span class="string">&quot;a+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="built_in">str</span>(cn)+<span class="string">&quot;: &quot;</span>+<span class="built_in">str</span>(move)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(cn,<span class="string">&quot;: &quot;</span>,move)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_Pics</span>():</span></span><br><span class="line">    <span class="keyword">global</span> move_list</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;movie.douban.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    pic_list = []</span><br><span class="line">    cn = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        link = <span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span> + <span class="built_in">str</span>(<span class="number">25</span> * i) + <span class="string">&#x27;&amp;filter=&#x27;</span></span><br><span class="line">        r = requests.get(link, headers=headers, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>, <span class="built_in">str</span>(i + <span class="number">1</span>), <span class="string">&quot;页 状态码：&quot;</span>, r.status_code)</span><br><span class="line">        <span class="comment"># print(r.text)</span></span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        div_list = soup.find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> pics <span class="keyword">in</span> div_list:</span><br><span class="line">            pic = pics.attrs[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> pic[-<span class="number">2</span>] != <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">                pic_list.append(pic)</span><br><span class="line"></span><br><span class="line">                response = requests.get(pic)</span><br><span class="line">                picName = <span class="built_in">str</span>(cn+<span class="number">1</span>)+<span class="string">&#x27;.&#x27;</span>+<span class="built_in">str</span>(move_list[cn]) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;豆瓣排名前250名电影&#x27;</span> + <span class="string">&#x27;/&#x27;</span> + picName, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(response.content)</span><br><span class="line">                <span class="built_in">print</span>(cn, <span class="string">&quot;: &quot;</span>, pic)</span><br><span class="line">                cn = cn + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;豆瓣排名前250名电影.txt&#x27;</span>, <span class="string">&quot;a+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write( <span class="string">&quot;豆瓣排名前250名电影：&quot;</span>+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;豆瓣排名前250名电影&quot;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&quot;豆瓣排名前250名电影&quot;</span>)</span><br><span class="line"></span><br><span class="line">    get_movies()</span><br><span class="line">    get_Pics()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>未完待续~</p>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径练习题</title>
      <link href="2021/05/19/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>2021/05/19/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>写算法题将近两年了，深知光看懂是远远不够的，必须要亲自动手，在不参照答案，完完整整的做对才行。像Dijkstra这样有点复杂的算法是有一定难度的，只有反复练习，如果写3次，自己都能写对，基本上就可以了。<br>本文附上几道与最短路径相关的题目与题解，欢迎初学的读者练习。</p><p>我在其他文章中写过的样例题也附在此页：<br>[hdu2544][<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2544%5D">http://acm.hdu.edu.cn/showproblem.php?pid=2544]</a><br>(Floyd/Dijkstra)</p><p>[hdu1599][<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1599%5D">http://acm.hdu.edu.cn/showproblem.php?pid=1599]</a><br>(Floyd拓展)</p><p>[hdu1874][<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874%5D">http://acm.hdu.edu.cn/showproblem.php?pid=1874]</a><br>(Dijkstra)</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2066"><mark class="hl-label blue">hdu2066</mark> </a></p><h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>虽然草儿是个路痴（就是在杭电待了一年多，居然还会在校园里迷路的人，汗~~),但是草儿仍然很喜欢旅行，因为在旅途中 会遇见很多人（白马王子，^0^），很多事，还能丰富自己的阅历，还可以看美丽的风景……草儿想去很多地方，她想要去东京铁塔看夜景，去威尼斯看电影，去阳明山上看海芋，去纽约纯粹看雪景，去巴黎喝咖啡写信，去北京探望孟姜女……眼看寒假就快到了，这么一大段时间，可不能浪费啊，一定要给自己好好的放个假，可是也不能荒废了训练啊，所以草儿决定在要在最短的时间去一个自己想去的地方！因为草儿的家在一个小镇上，没有火车经过，所以她只能去邻近的城市坐火车（好可怜啊~）。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入数据有多组，每组的第一行是三个整数T，S和D，表示有T条路，和草儿家相邻的城市的有S个，草儿想去的地方有D个；<br>接着有T行，每行有三个整数a，b，time,表示a,b城市之间的车程是time小时；(1=&lt;(a,b)&lt;=1000;a,b 之间可能有多条路)<br>接着的第T+1行有S个数，表示和草儿家相连的城市；<br>接着的第T+2行有D个数，表示草儿想去地方。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>输出草儿能去某个喜欢的城市的最短时间。</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 2 3</span><br><span class="line">1 3 5</span><br><span class="line">1 4 7</span><br><span class="line">2 8 12</span><br><span class="line">3 8 4</span><br><span class="line">4 9 12</span><br><span class="line">9 10 2</span><br><span class="line">1 2</span><br><span class="line">8 9 10</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a><mark class="hl-label blue">题解</mark> </h4><p>读完题后，先看输入样例，在纸上画图，不难发现，题意是:在目标城市中，找一个距离邻近城市最近的城市并输出两城市之间的距离。</p><p>思考：有很多邻近的城市以及很多目标城市，但是邻近城市到达草儿家的距离都是0，而此题中所有城市的编号是从1开始的。那么我们可以设置草儿家到所有邻近的城市的距离为0，然后使用Dijkstra算法，最后，设置一个MinLen,遍历目标城市距离起点的dis，与MinLen值比较，保留较小值，最后得到的就是答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> g[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> t,d,s,ed;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++) dis[i]=INF;</span><br><span class="line">dis[st]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;MAXN;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[j]&lt;MIN&amp;&amp;vis[j]==<span class="number">0</span>)&#123;</span><br><span class="line"> MIN=dis[j];</span><br><span class="line"> u=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;MAXN;v++)&#123;</span><br><span class="line"><span class="keyword">if</span>(g[u][v]!=INF&amp;&amp;vis[v]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+g[u][v]&lt;dis[v])</span><br><span class="line">dis[v]=dis[u]+g[u][v];</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;t,&amp;d,&amp;s))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;MAXN;j++)</span><br><span class="line">g[i][j]=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a,b,c,start[d],end[s];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(c&lt;g[a][b]) g[a][b]=g[b][a]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;start[i]);</span><br><span class="line">g[start[i]][<span class="number">0</span>]=g[<span class="number">0</span>][start[i]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;end[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MinLen=INF;</span><br><span class="line"><span class="built_in">Dijkstra</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[end[j]]&lt;MinLen)&#123;</span><br><span class="line">MinLen=dis[end[j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,MinLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-104-城市间紧急救援-25-分"><a href="#7-104-城市间紧急救援-25-分" class="headerlink" title="7-104 城市间紧急救援 (25 分)"></a>7-104 城市间紧急救援 (25 分)</h4><p>作为一个城市的应急救援队伍的负责人，你有一张特殊的全国地图。在地图上显示有多个分散的城市和一些连接城市的快速道路。每个城市的救援队数量和每一条连接两个城市的快速道路长度都标在地图上。当其他城市有紧急求助电话给你的时候，你的任务是带领你的救援队尽快赶往事发地，同时，一路上召集尽可能多的救援队。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第一行给出4个正整数N、M、S、D，其中N（2≤N≤500）是城市的个数，顺便假设城市的编号为0 ~ (N−1)；M是快速道路的条数；S是出发地的城市编号；D是目的地的城市编号。</p><p>第二行给出N个正整数，其中第i个数是第i个城市的救援队的数目，数字间以空格分隔。随后的M行中，每行给出一条快速道路的信息，分别是：城市1、城市2、快速道路的长度，中间用空格分开，数字均为整数且不超过500。输入保证救援可行且最优解唯一。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>第一行输出最短路径的条数和能够召集的最多的救援队数量。第二行输出从S到D的路径中经过的城市编号。数字间以空格分隔，输出结尾不能有多余空格。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 5 0 3</span><br><span class="line">20 30 40 10</span><br><span class="line">0 1 1</span><br><span class="line">1 3 2</span><br><span class="line">0 3 3</span><br><span class="line">0 2 2</span><br><span class="line">2 3 2</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 60</span><br><span class="line">0 1 3</span><br></pre></td></tr></table></figure><p>参考代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1000000</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">1001</span>],exs[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;,cf[<span class="number">1001</span>],ccf[<span class="number">1001</span>],pre[<span class="number">1001</span>];</span><br><span class="line"><span class="comment">//最短路径条数，各城市是否经过，各城市的救援队数量，到达该城市时所召集的所有救援队数量，到达该城市前经过的城市编号</span></span><br><span class="line"><span class="keyword">int</span> n,m,s,d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[s]=<span class="number">1</span>;<span class="comment">//开始时路径条数为1</span></span><br><span class="line">    exs[s]=<span class="number">1</span>;<span class="comment">//当前在出发城市</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> min=inf,f=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(exs[j]==<span class="number">0</span>&amp;&amp;a[s][j]&lt;min)&#123;<span class="comment">//寻找下一个距离最短的城市</span></span><br><span class="line">                min=a[s][j];</span><br><span class="line">                f=j;<span class="comment">//做好下一城市编号的标记</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">-1</span>)<span class="keyword">break</span>;<span class="comment">//与其他未经过的城市不连通，退出循环</span></span><br><span class="line">        <span class="keyword">else</span> exs[f]=<span class="number">1</span>;<span class="comment">//到达下一城市</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(exs[j]==<span class="number">0</span>&amp;&amp;a[s][j]&gt;a[s][f]+a[f][j])&#123;<span class="comment">//到达某一城市的最短路径</span></span><br><span class="line">                a[s][j]=a[s][f]+a[f][j];<span class="comment">//最短路径更新</span></span><br><span class="line">                pre[j]=f;<span class="comment">//记录上一个城市编号</span></span><br><span class="line">                cnt[j]=cnt[f];<span class="comment">//拷贝到达上一个城市时的最短路径条数</span></span><br><span class="line">                ccf[j]=ccf[f]+cf[j];<span class="comment">//到达某城市召集的全部救援队数量</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(exs[j]==<span class="number">0</span>&amp;&amp;a[s][j]==a[s][f]+a[f][j])&#123;<span class="comment">//发现其他的最短路径</span></span><br><span class="line">                cnt[j]=cnt[j]+cnt[f];<span class="comment">//更新到达当前城市时的最短路径条数</span></span><br><span class="line">                <span class="keyword">if</span>(ccf[j]&lt;ccf[f]+cf[j])&#123;<span class="comment">//最多救援队数量更新</span></span><br><span class="line">                    pre[j]=f;<span class="comment">//记录所经过的上一个城市编号</span></span><br><span class="line">                    ccf[j]=ccf[f]+cf[j];<span class="comment">//更新救援队总数</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;cf[i];</span><br><span class="line">        ccf[i]=cf[i];</span><br><span class="line">        cnt[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=j)a[i][j]=a[j][i]=inf;<span class="comment">//初始化（双向图）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> q,w,e;</span><br><span class="line">        cin&gt;&gt;q&gt;&gt;w&gt;&gt;e;</span><br><span class="line">        a[q][w]=a[w][q]=e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dijkstra</span>();</span><br><span class="line">    cout&lt;&lt;cnt[d]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ccf[d]+cf[s]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">int</span> road[<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,t=d;</span><br><span class="line">    <span class="keyword">while</span>(pre[t]!=<span class="number">0</span>)&#123;<span class="comment">//所经历的城市的从后往前的顺序</span></span><br><span class="line">        road[x++]=pre[t];</span><br><span class="line">        t=pre[t];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s;<span class="comment">//出发地</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;road[i];</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;d;<span class="comment">//目的地</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5月25日更新"><a href="#5月25日更新" class="headerlink" title="5月25日更新"></a>5月25日更新</h3><p>例题来源：PTA</p><h2 id="7-199-最短路径之Dijkstra-10-分"><a href="#7-199-最短路径之Dijkstra-10-分" class="headerlink" title="7-199 最短路径之Dijkstra (10 分)"></a>7-199 最短路径之Dijkstra (10 分)</h2><p>本题目要求通过读入无向网的边的信息（省略了各顶点的信息，仅用顶点编号来表示），构造图，并利用Dijkstra算法，求出指定源点到其它各点的最短路径。</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><p>第一行，两个整数，顶点数vN和边数eN。 以后若干行，是相关边的信息，无向图的边是对称的，只输入一半的边（小编号到大编号的，间以空格），最后两行各一个整数，前一个指定源点，后一个指定的查询的终到点。 （注意，示例中34条边，只输入了17条边的信息）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">10 34</span><br><span class="line">0 1 2</span><br><span class="line">0 3 5</span><br><span class="line">1 2 5</span><br><span class="line">1 3 2</span><br><span class="line">2 4 8</span><br><span class="line">2 5 4</span><br><span class="line">3 5 4</span><br><span class="line">3 6 2</span><br><span class="line">4 7 5</span><br><span class="line">4 5 2</span><br><span class="line">5 6 3</span><br><span class="line">5 7 9</span><br><span class="line">5 8 7</span><br><span class="line">6 8 7</span><br><span class="line">7 8 3</span><br><span class="line">7 9 4</span><br><span class="line">8 9 8</span><br><span class="line">0</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><p>在一行中输出从源点到指定终点的短路径及代价，注意：所有符号均为西文符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0--&gt;1--&gt;3--&gt;6--&gt;8:13</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> pre[MAXN];<span class="comment">//记录最短路径 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v,w;</span><br><span class="line">&#125;node; </span><br><span class="line">vector&lt;Node&gt; ve[MAXN];<span class="comment">//vector定义结构体 </span></span><br><span class="line"><span class="keyword">int</span> n,m,st,ed;<span class="comment">//st：起点，ed：终点 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) dis[i]=INF;</span><br><span class="line">    <span class="comment">//读者也可以用fill(dis, dis + MAXN, INF);</span></span><br><span class="line">dis[st]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[j]&lt;MIN&amp;&amp;vis[j]==<span class="number">0</span>)&#123;</span><br><span class="line">MIN=dis[j];</span><br><span class="line">u=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ve[u].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line"><span class="keyword">int</span> v=ve[u][j].v;</span><br><span class="line"><span class="keyword">int</span> w=ve[u][j].w; </span><br><span class="line"><span class="keyword">if</span>(vis[v]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+w&lt;dis[v])&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line">pre[v]=u;<span class="comment">//记录路径 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">m/=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">ve[a].<span class="built_in">push_back</span>(Node&#123;b,c&#125;);<span class="comment">//无向边存图 </span></span><br><span class="line">ve[b].<span class="built_in">push_back</span>(Node&#123;a,c&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;st,&amp;ed);</span><br><span class="line"><span class="keyword">if</span>(st==ed) <span class="built_in">printf</span>(<span class="string">&quot;%d--&gt;%d:0&quot;</span>,st,ed);<span class="comment">//特例 </span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Dijkstra</span>();</span><br><span class="line"><span class="keyword">int</span> x=ed;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">while</span>(x!=st)&#123;<span class="comment">//将经过的结点存入ans </span></span><br><span class="line">ans.<span class="built_in">push_back</span>(x);</span><br><span class="line">x=pre[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());<span class="comment">//因为是从后往前找的，所以要翻转 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,st);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.<span class="built_in">size</span>();i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--&gt;%d&quot;</span>,ans[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;:%d&quot;</span>,dis[ed]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5月24日更新"><a href="#5月24日更新" class="headerlink" title="5月24日更新"></a>5月24日更新</h3><p>题目来源： PTA</p><h2 id="7-95-公路村村通-30-分"><a href="#7-95-公路村村通-30-分" class="headerlink" title="7-95 公路村村通 (30 分)"></a>7-95 公路村村通 (30 分)</h2><h3 id="现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。"><a href="#现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。" class="headerlink" title="现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。"></a>现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。</h3><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入数据包括城镇数目正整数N（≤1000）和候选道路数目M（≤3N）；随后的M行对应M条道路，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号以及该道路改建的预算成本。为简单起见，城镇从1到N编号。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>输出村村通需要的最低成本。如果输入数据不足以保证畅通，则输出−1，表示需要建设更多公路。</p><h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">6 15</span><br><span class="line">1 2 5</span><br><span class="line">1 3 3</span><br><span class="line">1 4 7</span><br><span class="line">1 5 4</span><br><span class="line">1 6 2</span><br><span class="line">2 3 4</span><br><span class="line">2 4 6</span><br><span class="line">2 5 2</span><br><span class="line">2 6 6</span><br><span class="line">3 4 6</span><br><span class="line">3 5 1</span><br><span class="line">3 6 1</span><br><span class="line">4 5 10</span><br><span class="line">4 6 8</span><br><span class="line">5 6 3</span><br></pre></td></tr></table></figure><h4 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><mark class="hl-label red">这道题考察的是最小生成树和并查集哦!</mark> <p>题解：用kruskal求解即可，另外要判断道路是否畅通可以用一个变量t，记录最小生成树的边数，最后判断一下，”边数是否等于点数减一“即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> S[<span class="number">1200</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x!=S[x]) x=S[x];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,w=INF;</span><br><span class="line">&#125;edge[<span class="number">3300</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) S[i]=i;</span><br><span class="line"><span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="built_in">find</span>(edge[i].x);</span><br><span class="line"><span class="keyword">int</span> b=<span class="built_in">find</span>(edge[i].y);</span><br><span class="line"><span class="keyword">if</span>(a!=b) &#123;</span><br><span class="line">S[a]=b;</span><br><span class="line">ans+=edge[i].w;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==n<span class="number">-1</span>)<span class="comment">//n个点，n-1条边 </span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">edge[i].x=a;</span><br><span class="line">edge[i].y=b;</span><br><span class="line">edge[i].w=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">kruskal</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
            <tag> 练习 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra 算法学习和练习</title>
      <link href="2021/05/17/Dijkstra-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0/"/>
      <url>2021/05/17/Dijkstra-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Dijikstra算法简介："><a href="#Dijikstra算法简介：" class="headerlink" title="Dijikstra算法简介："></a>Dijikstra算法简介：</h3><mark class="hl-label green">单源最短、没有负边、高效稳定、复杂</mark> <h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><mark class="hl-label blue">算法原理：</mark> 贪心法，从起点开始，每次都找一个离起点最近的点，每走过一个点，就用vis标记为已经走过的点。每次找到都是到起点最近的点，最后得到的一定是其他所有的点上（到起点的）最短路径。<mark class="hl-label blue">具体步骤：</mark> <p>首先用g[maxn][maxn]存储路径长度和结点的信息，注意本题中，两个结点间的长度可能不唯一，所以我们要选取最短的那条路，见第48行 <mark class="hl-label red">[1]</mark> </p><p>其次，用dis[i]数组，存储第i个结点到起点的最短距离，初始化的时候，dis[start+1]~dis[ed]的值均为INF（看作无限大），把dis[start]的值设为0，<br>（起点到起点的距离为0啊。）</p><p>接着，我们也要用到vis[maxn]来记录每一个结点的访问情况。每次走过一个点，就标记一下，注意，一定要在确定找到了下一个离自己最近的点以后，才能标记，<mark class="hl-label red">[2]就是错的，[3]才是对的</mark> </p><p>好，接下来就正式开始，第一层循环，最多遍历n次就能完成认为，第二层for循环，遍历所有的点（n个），把能走且没走过的路找出来 （dis[j]&lt; MAXN），在这些能走的路中，选一个路口（距离起点最短），标记为已走的路。<br>如果不存在这样的路，说明已经找完，（u==-1），这时候return即可。<br>以刚才标记的路口为u，通过u去拓展道路，例如，原先dis[v]=INF，g[u][v]=1;dis[u]=3;<br>通过u，我们可以到达v，从而使得v到达起点的距离，dis[v]=dis[u]+g[u][v]=4;<br>通过这样不断的扩展道路，我们最终能找出所有点到起点的最短路径。</p><mark class="hl-label blue">Ps：</mark> 这是最基础的求最短路，当图又大又稀疏的时候，就要对算法进行优化，另外，该算法还可以拓展，当题目中出现几条相同长度的道路的时候，需要考虑其他属性的时候（该题属性是道路长度），就要进行选择比较和保留，我们以后再进行拓展。<p>下面是一道非常基础的题目，也可以用Floyd算法解出。</p><h4 id="例题分析：hdu1874-http-acm-hdu-edu-cn-showproblem-php-pid-1874"><a href="#例题分析：hdu1874-http-acm-hdu-edu-cn-showproblem-php-pid-1874" class="headerlink" title="例题分析：hdu1874[http://acm.hdu.edu.cn/showproblem.php?pid=1874]"></a>例题分析：hdu1874[<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874%5D">http://acm.hdu.edu.cn/showproblem.php?pid=1874]</a></h4><h4 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description:"></a>Problem description:</h4><p>某省自从实行了很多年的畅通工程计划后，终于修建了很多路。不过路多了也不好，每次要从一个城镇到另一个城镇时，都有许多种道路方案可以选择，而某些方案要比另一些方案行走的距离要短很多。这让行人很困扰。</p><p>现在，已知起点和终点，请你计算出要从起点到终点，最短需要行走多少距离。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>本题目包含多组数据，请处理到文件结束。<br>每组数据第一行包含两个正整数N和M(0&lt;N&lt;200,0&lt;M&lt;1000)，分别代表现有城镇的数目和已修建的道路的数目。城镇分别以0～N-1编号。<br>接下来是M行道路信息。每一行有三个整数A,B,X(0&lt;=A,B&lt;N,A!=B,0&lt;X&lt;10000),表示城镇A和城镇B之间有一条长度为X的双向道路。</p><p>再接下一行有两个整数S,T(0&lt;=S,T&lt;N)，分别代表起点和终点。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>对于每组数据，请在一行里输出最短需要行走的距离。如果不存在从S到T的路线，就输出-1.</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">0 1 1</span><br><span class="line">0 2 3</span><br><span class="line">1 2 1</span><br><span class="line">0 2</span><br><span class="line">3 1</span><br><span class="line">0 1 1</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h4 id="Sample-Out"><a href="#Sample-Out" class="headerlink" title="Sample Out"></a>Sample Out</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> g[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m,st,ed;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//fill(dis[0],dis[0]+MAXN,INF);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">dis[i]=INF;<span class="comment">//初始化所有道路到起点距离无限大</span></span><br><span class="line">dis[st]=<span class="number">0</span>;<span class="comment">//标记起点到起点距离为0</span></span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));<span class="comment">//初始化标记数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//第一层循环</span></span><br><span class="line"><span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123; <span class="comment">// 第二层循环</span></span><br><span class="line"><span class="keyword">if</span>(vis[j]==<span class="number">0</span>&amp;&amp;dis[j]&lt;MIN)&#123; <span class="comment">//找出没走过的且距离起点最近的结点</span></span><br><span class="line">MIN=dis[j];</span><br><span class="line">u=j;</span><br><span class="line"><span class="comment">//vis[u]=1;////////////////////////////////////[2]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;<span class="comment">//没找到，退出。</span></span><br><span class="line">vis[u]=<span class="number">1</span>;<span class="comment">////////////////////////////////////////////[3]</span></span><br><span class="line">        <span class="comment">//标记为已走过的路</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;g[u][v]!=INF)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+g[u][v]&lt;dis[v])&#123;</span><br><span class="line">dis[v]=dis[u]+g[u][v];<span class="comment">//拓展能走的路</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))&#123;<span class="comment">//n个结点（城市），m条已修建的道路 </span></span><br><span class="line"> <span class="keyword">int</span> a,b,c;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"> g[i][j]=INF;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">  <span class="keyword">if</span>(c&lt;g[a][b])<span class="comment">/////////////////////////////[1]</span></span><br><span class="line">   g[a][b]=c,g[b][a]=c;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;st,&amp;ed);</span><br><span class="line"> <span class="built_in">Dijkstra</span>();</span><br><span class="line"> <span class="keyword">if</span>(dis[ed]!=INF) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dis[ed]);</span><br><span class="line"> <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###现在我们可以用Dijkstra算法求其他点到起点的最短路径了，但如果我们想<mark class="hl-label green">求出从起点到终点的路径信息</mark>  ，还要继续往下学习。<br>先看例题：</p><h3 id="在竞赛中，如果内存空间不够，我们可以使用vector存图，下面例题中就用到了vector，"><a href="#在竞赛中，如果内存空间不够，我们可以使用vector存图，下面例题中就用到了vector，" class="headerlink" title="在竞赛中，如果内存空间不够，我们可以使用vector存图，下面例题中就用到了vector，"></a>在竞赛中，如果内存空间不够，我们可以使用vector存图，下面例题中就用到了vector，</h3><p>例题来源：PTA</p><h2 id="7-199-最短路径之Dijkstra-10-分"><a href="#7-199-最短路径之Dijkstra-10-分" class="headerlink" title="7-199 最短路径之Dijkstra (10 分)"></a>7-199 最短路径之Dijkstra (10 分)</h2><p>本题目要求通过读入无向网的边的信息（省略了各顶点的信息，仅用顶点编号来表示），构造图，并利用Dijkstra算法，求出指定源点到其它各点的最短路径。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><p>第一行，两个整数，顶点数vN和边数eN。 以后若干行，是相关边的信息，无向图的边是对称的，只输入一半的边（小编号到大编号的，间以空格），最后两行各一个整数，前一个指定源点，后一个指定的查询的终到点。 （注意，示例中34条边，只输入了17条边的信息）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">10 34</span><br><span class="line">0 1 2</span><br><span class="line">0 3 5</span><br><span class="line">1 2 5</span><br><span class="line">1 3 2</span><br><span class="line">2 4 8</span><br><span class="line">2 5 4</span><br><span class="line">3 5 4</span><br><span class="line">3 6 2</span><br><span class="line">4 7 5</span><br><span class="line">4 5 2</span><br><span class="line">5 6 3</span><br><span class="line">5 7 9</span><br><span class="line">5 8 7</span><br><span class="line">6 8 7</span><br><span class="line">7 8 3</span><br><span class="line">7 9 4</span><br><span class="line">8 9 8</span><br><span class="line">0</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><p>在一行中输出从源点到指定终点的短路径及代价，注意：所有符号均为西文符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0--&gt;1--&gt;3--&gt;6--&gt;8:13</span><br></pre></td></tr></table></figure><p>先附上代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> pre[MAXN];<span class="comment">//记录最短路径 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v,w;</span><br><span class="line">&#125;node; </span><br><span class="line">vector&lt;Node&gt; ve[MAXN];<span class="comment">//vector定义结构体 </span></span><br><span class="line"><span class="keyword">int</span> n,m,st,ed;<span class="comment">//st：起点，ed：终点 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) dis[i]=INF;</span><br><span class="line">    <span class="comment">//读者也可以用fill(dis, dis + MAXN, INF);</span></span><br><span class="line">dis[st]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[j]&lt;MIN&amp;&amp;vis[j]==<span class="number">0</span>)&#123;</span><br><span class="line">MIN=dis[j];</span><br><span class="line">u=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ve[u].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line"><span class="keyword">int</span> v=ve[u][j].v;</span><br><span class="line"><span class="keyword">int</span> w=ve[u][j].w; </span><br><span class="line"><span class="keyword">if</span>(vis[v]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+w&lt;dis[v])&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line">pre[v]=u;<span class="comment">//记录路径 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">m/=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">ve[a].<span class="built_in">push_back</span>(Node&#123;b,c&#125;);<span class="comment">//无向边存图 </span></span><br><span class="line">ve[b].<span class="built_in">push_back</span>(Node&#123;a,c&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;st,&amp;ed);</span><br><span class="line"><span class="keyword">if</span>(st==ed) <span class="built_in">printf</span>(<span class="string">&quot;%d--&gt;%d:0&quot;</span>,st,ed);<span class="comment">//特例 </span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">Dijkstra</span>();</span><br><span class="line"><span class="keyword">int</span> x=ed;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">while</span>(x!=st)&#123;<span class="comment">//将经过的结点存入ans </span></span><br><span class="line">ans.<span class="built_in">push_back</span>(x);</span><br><span class="line">x=pre[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());<span class="comment">//因为是从后往前找的，所以要翻转 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,st);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.<span class="built_in">size</span>();i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--&gt;%d&quot;</span>,ans[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;:%d&quot;</span>,dis[ed]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 求最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd算法基础学习和练习</title>
      <link href="2021/05/08/Floyd%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0/"/>
      <url>2021/05/08/Floyd%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Floyd求最短路径"><a href="#Floyd求最短路径" class="headerlink" title="Floyd求最短路径"></a>Floyd求最短路径</h4><h5 id="优点：算法简单"><a href="#优点：算法简单" class="headerlink" title="优点：算法简单"></a>优点：算法简单</h5><h5 id="缺点：时间复杂度大，图的结点适合在以内"><a href="#缺点：时间复杂度大，图的结点适合在以内" class="headerlink" title="缺点：时间复杂度大，图的结点适合在以内"></a>缺点：时间复杂度大，图的结点适合在<mark class="hl-label red">200</mark> 以内</h5><h5 id=""><a href="#" class="headerlink" title=""></a><mark class="hl-label green">在小图中可以尝试floyd算法，简单省时，如果图过大，还是要用Dijistra算法</mark> </h5><p>Floyd采用了3个循环，遍历所有两两不同的点。<br>通过循环来更新两点之间的最短路径。<br>举个例子，有两个点A，B，它们是连通的，但是它们之间的距离很长，就像两个村子隔了一座大山，AB是绕过这座山，这时候，在山上发现一个洞口，这个洞（记为K）横穿大山，从A到K再从K到B的距离比原来不经过K点的路径更短，这样我们就把AB的长度更新为AK+KB。<br>更新完所有节点的长度后，就能得到，起点到终点的最短路径。</p><h6 id="为了说明算法，我们先看一道题。"><a href="#为了说明算法，我们先看一道题。" class="headerlink" title="为了说明算法，我们先看一道题。"></a>为了说明算法，我们先看一道题。</h6><p>例题hdu2544[<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2544%5D">http://acm.hdu.edu.cn/showproblem.php?pid=2544]</a></p><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入包括多组数据。每组数据第一行是两个整数N、M（N&lt;=100，M&lt;=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1&lt;=A,B&lt;=N,1&lt;=C&lt;=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。<br>输入保证至少存在1条商店到赛场的路线。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">1 2 3</span><br><span class="line">3 3</span><br><span class="line">1 2 5</span><br><span class="line">2 3 5</span><br><span class="line">3 1 2</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">220</span>][<span class="number">220</span>]; </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if(a[i][k]==INF) continue;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]&gt;a[i][k]+a[k][j]) &#123;</span><br><span class="line">a[i][j]=a[i][k]+a[k][j];<span class="comment">//更新最短路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans=<span class="built_in">min</span>(ans,a[i][i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)))&#123;</span><br><span class="line"><span class="comment">//if(n+m==0) return 0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">a[i][j]=INF;<span class="comment">//初始，所有结点间的距离看作无限大</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">a[x][y]=a[y][x]=z;  <span class="comment">// 无向图存储用邻接矩阵</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">floyd</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 求最短路 </tag>
            
            <tag> Floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd拓展：找最小圈</title>
      <link href="2021/05/07/Floyd%E6%8B%93%E5%B1%95%EF%BC%9A%E6%89%BE%E6%9C%80%E5%B0%8F%E5%9C%88/"/>
      <url>2021/05/07/Floyd%E6%8B%93%E5%B1%95%EF%BC%9A%E6%89%BE%E6%9C%80%E5%B0%8F%E5%9C%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="程序伊始，某个结点a-i-i-的值是INF，但是运行完之后，其值变为a-i-i-a-i-u-a-u-v-…-a-v-i-这是什么情况呢？其实这就是从起点出发，在图上绕了一个最小圈的路径。"><a href="#程序伊始，某个结点a-i-i-的值是INF，但是运行完之后，其值变为a-i-i-a-i-u-a-u-v-…-a-v-i-这是什么情况呢？其实这就是从起点出发，在图上绕了一个最小圈的路径。" class="headerlink" title="程序伊始，某个结点a[i][i]的值是INF，但是运行完之后，其值变为a[i][i]=a[i][u]+a[u][v]+…+a[v][i],这是什么情况呢？其实这就是从起点出发，在图上绕了一个最小圈的路径。"></a>程序伊始，某个结点a[i][i]的值是INF，但是运行完之后，其值变为a[i][i]=a[i][u]+a[u][v]+…+a[v][i],这是什么情况呢？其实这就是从起点出发，在图上绕了一个最小圈的路径。</h5><h5 id="还是用一道例题来说明算法-http-acm-hdu-edu-cn-showproblem-php-pid-1599"><a href="#还是用一道例题来说明算法-http-acm-hdu-edu-cn-showproblem-php-pid-1599" class="headerlink" title="还是用一道例题来说明算法[http://acm.hdu.edu.cn/showproblem.php?pid=1599]"></a>还是用一道例题来说明算法[<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1599%5D">http://acm.hdu.edu.cn/showproblem.php?pid=1599]</a></h5><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入包括多组数据。每组数据第一行是两个整数N、M（N&lt;=100，M&lt;=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1&lt;=A,B&lt;=N,1&lt;=C&lt;=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。<br>输入保证至少存在1条商店到赛场的路线。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间</p><p>Sample Input</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">1 2 3</span><br><span class="line">3 3</span><br><span class="line">1 2 5</span><br><span class="line">2 3 5</span><br><span class="line">3 1 2</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 求最短路 </tag>
            
            <tag> Floyd </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
