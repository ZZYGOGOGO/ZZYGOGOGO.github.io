<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基本数据结构复习</title>
      <link href="2021/05/23/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
      <url>2021/05/23/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-容器"><a href="#1-容器" class="headerlink" title="1. 容器"></a>1. 容器</h1><p>STL容器分为两种</p><h3 id="1-1-顺序式容器"><a href="#1-1-顺序式容器" class="headerlink" title="1.1. 顺序式容器"></a>1.1. 顺序式容器</h3><pre><code>    - vector    - stack    - queue    - priority_queue    - list    - deque (双向列表)</code></pre><h3 id="1-2-关联式容器"><a href="#1-2-关联式容器" class="headerlink" title="1.2. 关联式容器"></a>1.2. 关联式容器</h3><pre><code>    - set    - multiset    - map    - multimap</code></pre><h1 id="2-1-vector"><a href="#2-1-vector" class="headerlink" title="2.1 vector"></a>2.1 vector</h1><p>在竞赛中，若内存空间足够，则使用普通的静态数组，否则可以使用vector动态数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">定义<span class="keyword">int</span>型数组： </span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">vector也可以定义二维数组，读者可查找资料，</span><br><span class="line">我们可以定义结构体配合vector使用，如</span><br><span class="line">Dijkstra算法中：</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> from,to,w;</span><br><span class="line">&#125;; </span><br><span class="line">vector&lt;Edge&gt; e[num];</span><br><span class="line"></span><br><span class="line">定义string型数组：</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>,<span class="string">&quot;null&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">定义结构体数组：</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span> <span class="keyword">int</span> x,y;&#125;;</span><br><span class="line">vector&lt;point&gt; a; </span><br><span class="line"></span><br><span class="line">常用操作：</span><br><span class="line">赋值：a.<span class="built_in">push_back</span>(x); <span class="comment">//在尾部添加元素 </span></span><br><span class="line">元素个数：a.<span class="built_in">size</span>();</span><br><span class="line">判空：<span class="keyword">bool</span> isEmpty=a.<span class="built_in">empty</span>(); </span><br><span class="line">打印：和普通数组一样的索引 cout&lt;&lt;a[<span class="number">0</span>]</span><br><span class="line">删除尾部：a.<span class="built_in">pop_back</span>();</span><br><span class="line">删除元素：a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>()+<span class="number">2</span>);</span><br><span class="line">清空： a.<span class="built_in">clear</span>();</span><br><span class="line">翻转： <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">排序：<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯真题：玩具蛇</title>
      <link href="2021/05/23/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%EF%BC%9A%E7%8E%A9%E5%85%B7%E8%9B%87(DFS)/"/>
      <url>2021/05/23/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%EF%BC%9A%E7%8E%A9%E5%85%B7%E8%9B%87(DFS)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近备战蓝桥杯国赛，方法就是刷真题，今天做了一道BFS题和一道DFS题，都比较简单，适合有一定DFS、BFS基础的读者阅读。</p><h3 id="试题-E-玩具蛇"><a href="#试题-E-玩具蛇" class="headerlink" title="试题 E: 玩具蛇"></a>试题 E: 玩具蛇</h3><h6 id="本题总分：15-分"><a href="#本题总分：15-分" class="headerlink" title="本题总分：15 分"></a>本题总分：15 分</h6><h3 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><p>小蓝有一条玩具蛇，一共有 16 节，上面标着数字 1 至 16。每一节都是一个正方形的形状。相邻的两节可以成直线或者成 90 度角。小蓝还有一个 4 × 4 的方格盒子，用于存放玩具蛇，盒子的方格上依次标着字母 A 到 P 共 16 个字母。小蓝可以折叠自己的玩具蛇放到盒子里面。他发现，有很多种方案可以将玩具蛇放进去。<br>下图给出了两种方案：<br><img src="https://user-images.githubusercontent.com/79883276/119254674-37552380-bbea-11eb-81c8-0c96dca371e0.jpg" alt="SharedScreenshot"></p><p>请帮小蓝计算一下，总共有多少种不同的方案。如果两个方案中，存在玩<br>具蛇的某一节放在了盒子的不同格子里，则认为是不同的方案。</p><h4 id="【答案提交】"><a href="#【答案提交】" class="headerlink" title="【答案提交】"></a>【答案提交】</h4><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><mark class="hl-label blue">思路分析：</mark> <p>题意解读：十六个格子，蛇头相当于是起点，那么就有16个起点，从起点出发，再走十五步，要求这十五步必须是连续的而且不能重复，且都在这个正方形中，有多少种走法？<br>那么我们可以联想到经典的走迷宫问题，这里给出DFS的做法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;<span class="number">4</span>||y&lt;<span class="number">1</span>||y&gt;<span class="number">4</span>) <span class="keyword">return</span>;<span class="comment">//递归边界 </span></span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">16</span>) &#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u=x+dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> v=y+dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(vis[u][v]==<span class="number">0</span>)&#123;<span class="comment">//如果这个位置没有走过 </span></span><br><span class="line">vis[u][v]=<span class="number">1</span>;<span class="comment">//那就标记这个地方走过了 </span></span><br><span class="line"><span class="built_in">dfs</span>(u,v,d+<span class="number">1</span>);<span class="comment">//从这个地方开始，走下一步 </span></span><br><span class="line"><span class="comment">//主要一定要写d+1，而不是++d或者d++ </span></span><br><span class="line">vis[u][v]=<span class="number">0</span>;<span class="comment">//从这个位置出发的结果已经算完了，</span></span><br><span class="line"><span class="comment">//清除标记，进入下一层循环，从其他位置开始走 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));<span class="comment">//每次dfs前都要初始化标记数组 </span></span><br><span class="line">vis[i][j]=<span class="number">1</span>;<span class="comment">//标记起点为已经走过 </span></span><br><span class="line"><span class="built_in">dfs</span>(i,j,<span class="number">1</span>);<span class="comment">//起点已经走过，代表第一节 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 真题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯真题：扩散</title>
      <link href="2021/05/23/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%EF%BC%9A%E6%89%A9%E6%95%A3(BFS)/"/>
      <url>2021/05/23/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%EF%BC%9A%E6%89%A9%E6%95%A3(BFS)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天写的第二道题也是用到了搜索技术<br>话不多说，直接看题：</p><h2 id="试题-B-扩散"><a href="#试题-B-扩散" class="headerlink" title="试题 B: 扩散"></a>试题 B: 扩散</h2><h5 id="本题总分：5-分"><a href="#本题总分：5-分" class="headerlink" title="本题总分：5 分"></a>本题总分：5 分</h5><h3 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><p>小蓝在一张无限大的特殊画布上作画。这张画布可以看成一个方格图，每个格子可以用一个二维的整数坐标表示。小蓝在画布上首先点了一下几个点：<br>(0, 0), (2020, 11), (11, 14), (2000, 2000)。<br>只有这几个格子上有黑色，其它位置都是白色的。每过一分钟，黑色就会扩散一点。具体的，如果一个格子里面是黑色，它就会扩散到上、下、左、右四个相邻的格子中，使得这四个格子也变成黑色（如果原来就是黑色，则还是黑色）。</p><h3 id="请问，经过-2020-分钟后，画布上有多少个格子是黑色的。"><a href="#请问，经过-2020-分钟后，画布上有多少个格子是黑色的。" class="headerlink" title="请问，经过 2020 分钟后，画布上有多少个格子是黑色的。"></a>请问，经过 2020 分钟后，画布上有多少个格子是黑色的。</h3><h3 id="【答案提交】"><a href="#【答案提交】" class="headerlink" title="【答案提交】"></a>【答案提交】</h3><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一<br>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><p>读者可以自行尝试做下本题，思路和题解在下方。<br>#############################################<br><img src="https://user-images.githubusercontent.com/79883276/119222766-889cde80-bb28-11eb-8de4-372c0cb807a5.JPG" alt="IMG_4050(20210516-232732)"><br>#############################################</p><h3 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h3><p>1.我们可以用结构体记录每一个点的坐标以及这个点扩散的时间。<br>2.考虑到，2020分钟后，某些点的坐标x,y可能为负数，而负数是不能作为数组下标的，那么我们可以把每个起点的横竖坐标都加上2020。</p><h3 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h3><p>在思路一中，提到的负数坐标，是无法作为vis标记数组的下标，但是在一的结构体中，我们可以设置变量x，表示该点是否扩散过。</p><mark class="hl-label red">本题采用BFS算法，需要注意的是，起点有四个，我们要把这四个坐标都加入到队列中去。</mark> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">2020</span>,<span class="number">2020</span>&#125;,&#123;<span class="number">4040</span>,<span class="number">2031</span>&#125;,&#123;<span class="number">2031</span>,<span class="number">2034</span>&#125;,&#123;<span class="number">4020</span>,<span class="number">4020</span>&#125;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,step=<span class="number">0</span>;</span><br><span class="line">&#125;; </span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">7000</span>][<span class="number">7000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">queue&lt;node&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">node now=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">node next;</span><br><span class="line">next.x=now.x+dir[i][<span class="number">0</span>];</span><br><span class="line">next.y=now.y+dir[i][<span class="number">1</span>];</span><br><span class="line">next.step=now.step+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(vis[next.x][next.y]==<span class="number">0</span>&amp;&amp;next.step&lt;=<span class="number">2020</span>)&#123;</span><br><span class="line">vis[next.x][next.y]=<span class="number">1</span>;</span><br><span class="line">ans++;</span><br><span class="line">q.<span class="built_in">push</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> stx,<span class="keyword">int</span> sty)</span></span>&#123;</span><br><span class="line">node start;</span><br><span class="line">start.x=stx;</span><br><span class="line">start.y=sty;</span><br><span class="line">start.step=<span class="number">0</span>;</span><br><span class="line">vis[start.x][start.y]=<span class="number">1</span>;</span><br><span class="line">    ans++;<span class="comment">//在答案中加入起点</span></span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="built_in">init</span>(pos[i][<span class="number">0</span>],pos[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bfs</span>();</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 真题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树之kruskal算法</title>
      <link href="2021/05/21/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E4%B9%8Bkruskal%E7%AE%97%E6%B3%95/"/>
      <url>2021/05/21/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E4%B9%8Bkruskal%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><mark class="hl-label blue">对比</mark> <p>相较与Prim算法，Kruskal算法编码更加简单！它有两个关键技术：<br>①把边的长度按从小到大进行排序<br>②判断圈：即处理连通性问题，可以用并查集处理</p><mark class="hl-label green">算法原理</mark> <p>对边进行贪心操作。从最短的边开始，把它加入到T中；在剩下的边中继续寻找最短的边，并加入到T中，重复这个过程，直到所有的点都已加入到T中。</p><p><img src="https://user-images.githubusercontent.com/79883276/119092831-80b63f00-ba41-11eb-9752-e15098dad607.png" alt="FE6891A2F5B8976A0B8309E76BCF1890"></p><p>和Prim算法类似，在这个过程中，我们需要判断是否形成了圈。<br>例题<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1233">hdu 1233</a></p><h3 id="还是畅通工程"><a href="#还是畅通工程" class="headerlink" title="还是畅通工程"></a>还是畅通工程</h3><h6 id="Time-Limit-4000-2000-MS-Java-Others-Memory-Limit-65536-32768-K-Java-Others"><a href="#Time-Limit-4000-2000-MS-Java-Others-Memory-Limit-65536-32768-K-Java-Others" class="headerlink" title="Time Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)"></a>Time Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</h6><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。<br>当N为0时，输入结束，该用例不被处理。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>对每个测试用例，在1行里输出最小的公路总长度。</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 1</span><br><span class="line">1 3 2</span><br><span class="line">2 3 4</span><br><span class="line">4</span><br><span class="line">1 2 1</span><br><span class="line">1 3 4</span><br><span class="line">1 4 1</span><br><span class="line">2 3 3</span><br><span class="line">2 4 2</span><br><span class="line">3 4 5</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> S[MAXN];<span class="comment">//并查集</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;<span class="comment">//u,v是村庄编号，w是距离 </span></span><br><span class="line">&#125;edge[MAXN]; </span><br><span class="line"><span class="comment">//int find(int u)&#123;</span></span><br><span class="line"><span class="comment">//while(u!=S[u]) &#123;</span></span><br><span class="line"><span class="comment">//u=S[u];//寻找祖先 </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> S[u]==u?u:<span class="built_in">find</span>(S[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) S[i]=i;<span class="comment">//并查集初始化</span></span><br><span class="line"><span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);<span class="comment">//存储的时候是从下标1开始的，所以这里+1 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;<span class="comment">//从小到大遍历m条边</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="built_in">find</span>(edge[i].u);</span><br><span class="line"><span class="keyword">int</span> b=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line"><span class="keyword">if</span>(a==b) <span class="keyword">continue</span>;<span class="comment">//两祖先相同，会形成圈，舍弃 </span></span><br><span class="line"><span class="keyword">else</span> S[a]=b; </span><br><span class="line">ans+=edge[i].w;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n),n)&#123;</span><br><span class="line">m=n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;edge[i].u,&amp;edge[i].v,&amp;edge[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;# %d\n&quot;</span>,<span class="built_in">kruskal</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题2："><a href="#例题2：" class="headerlink" title="例题2："></a>例题2：</h3><p>题目来源： PTA</p><h2 id="7-95-公路村村通-30-分"><a href="#7-95-公路村村通-30-分" class="headerlink" title="7-95 公路村村通 (30 分)"></a>7-95 公路村村通 (30 分)</h2><h3 id="现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。"><a href="#现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。" class="headerlink" title="现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。"></a>现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。</h3><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入数据包括城镇数目正整数N（≤1000）和候选道路数目M（≤3N）；随后的M行对应M条道路，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号以及该道路改建的预算成本。为简单起见，城镇从1到N编号。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>输出村村通需要的最低成本。如果输入数据不足以保证畅通，则输出−1，表示需要建设更多公路。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">6 15</span><br><span class="line">1 2 5</span><br><span class="line">1 3 3</span><br><span class="line">1 4 7</span><br><span class="line">1 5 4</span><br><span class="line">1 6 2</span><br><span class="line">2 3 4</span><br><span class="line">2 4 6</span><br><span class="line">2 5 2</span><br><span class="line">2 6 6</span><br><span class="line">3 4 6</span><br><span class="line">3 5 1</span><br><span class="line">3 6 1</span><br><span class="line">4 5 10</span><br><span class="line">4 6 8</span><br><span class="line">5 6 3</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><mark class="hl-label red">这道题考察的是最小生成树和并查集哦!</mark> <p>题解：用kruskal求解即可，另外要判断道路是否畅通可以用一个变量t，记录最小生成树的边数，最后判断一下，”边数是否等于点数减一“即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> S[<span class="number">1200</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x!=S[x]) x=S[x];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,w=INF;</span><br><span class="line">&#125;edge[<span class="number">3300</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) S[i]=i;</span><br><span class="line"><span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="built_in">find</span>(edge[i].x);</span><br><span class="line"><span class="keyword">int</span> b=<span class="built_in">find</span>(edge[i].y);</span><br><span class="line"><span class="keyword">if</span>(a!=b) &#123;</span><br><span class="line">S[a]=b;</span><br><span class="line">ans+=edge[i].w;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==n<span class="number">-1</span>)<span class="comment">//n个点，n-1条边 </span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">edge[i].x=a;</span><br><span class="line">edge[i].y=b;</span><br><span class="line">edge[i].w=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">kruskal</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树之Prim算法</title>
      <link href="2021/05/21/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E4%B9%8BPrim%E7%AE%97%E6%B3%95/"/>
      <url>2021/05/21/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E4%B9%8BPrim%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天介绍的算法是图论中的最小生成树，我们需要注意一下最小生成树和最短路径的区别：<br>最短路径是两点之间的距离最小，而最小生成树得到的是整个图的路径和最小</p><mark class="hl-label red">（但任意两点之间未必是最短路径！）</mark> <h4 id="下面介绍Prim算法。"><a href="#下面介绍Prim算法。" class="headerlink" title="下面介绍Prim算法。"></a>下面介绍Prim算法。</h4><mark class="hl-label red">适合稠密图、编码比kruskal稍难</mark> <p>对点进行贪心操作，从u开始，把u加入集合{},然后寻找距离集合{u}最近的v，加入集合{u},<br>接着寻找距离集合{u,v}最近的w，加入集合{u,v},重复此过程，将所有点都加入集合。<br>每加入一个点，都要判断是否形成了圈。</p><p><a href="https://pintia.cn/problem-sets/1337328863812022272/problems/1337329150421712896">例题7-95 公路村村通 (30 分)</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取豆瓣网排名前250的电影</title>
      <link href="2021/05/19/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%BD%91%E6%8E%92%E5%90%8D%E5%89%8D250%E7%9A%84%E7%94%B5%E5%BD%B1/"/>
      <url>2021/05/19/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%BD%91%E6%8E%92%E5%90%8D%E5%89%8D250%E7%9A%84%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>爬虫是一项很有用的技术，我们可以利用它在网络上搜集需要的信息，并对信息加以分析，得到我们想要的结果。现在，分享一个简单的爬虫程序，爬取豆瓣网排名前250的电影，它会生成一个文件和一个文件夹，保存排名信息。<br>先把代码贴出来，再慢慢分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">move_list=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_movies</span>():</span></span><br><span class="line">    <span class="keyword">global</span> move_list</span><br><span class="line">    headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span> : <span class="string">&#x27;movie.douban.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cn=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        link=<span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span>+<span class="built_in">str</span>(<span class="number">25</span>*i) + <span class="string">&#x27;&amp;filter=&#x27;</span></span><br><span class="line">        r=requests.get(link,headers=headers,timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>,<span class="built_in">str</span>(i+<span class="number">1</span>),<span class="string">&quot;页 状态码：&quot;</span>,r.status_code)</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line">        soup=BeautifulSoup(r.text,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        div_list=soup.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;hd&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> div_list:</span><br><span class="line">            move=each.a.span.text.strip()</span><br><span class="line">            move_list.append(move)</span><br><span class="line">            cn=cn+<span class="number">1</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;豆瓣排名前250名电影.txt&#x27;</span>,<span class="string">&quot;a+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="built_in">str</span>(cn)+<span class="string">&quot;: &quot;</span>+<span class="built_in">str</span>(move)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(cn,<span class="string">&quot;: &quot;</span>,move)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_Pics</span>():</span></span><br><span class="line">    <span class="keyword">global</span> move_list</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;movie.douban.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    pic_list = []</span><br><span class="line">    cn = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        link = <span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span> + <span class="built_in">str</span>(<span class="number">25</span> * i) + <span class="string">&#x27;&amp;filter=&#x27;</span></span><br><span class="line">        r = requests.get(link, headers=headers, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>, <span class="built_in">str</span>(i + <span class="number">1</span>), <span class="string">&quot;页 状态码：&quot;</span>, r.status_code)</span><br><span class="line">        <span class="comment"># print(r.text)</span></span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        div_list = soup.find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> pics <span class="keyword">in</span> div_list:</span><br><span class="line">            pic = pics.attrs[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> pic[-<span class="number">2</span>] != <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">                pic_list.append(pic)</span><br><span class="line"></span><br><span class="line">                response = requests.get(pic)</span><br><span class="line">                picName = <span class="built_in">str</span>(cn+<span class="number">1</span>)+<span class="string">&#x27;.&#x27;</span>+<span class="built_in">str</span>(move_list[cn]) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;豆瓣排名前250名电影&#x27;</span> + <span class="string">&#x27;/&#x27;</span> + picName, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(response.content)</span><br><span class="line">                <span class="built_in">print</span>(cn, <span class="string">&quot;: &quot;</span>, pic)</span><br><span class="line">                cn = cn + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;豆瓣排名前250名电影.txt&#x27;</span>, <span class="string">&quot;a+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write( <span class="string">&quot;豆瓣排名前250名电影：&quot;</span>+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;豆瓣排名前250名电影&quot;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&quot;豆瓣排名前250名电影&quot;</span>)</span><br><span class="line"></span><br><span class="line">    get_movies()</span><br><span class="line">    get_Pics()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>未完待续~</p>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径练习题</title>
      <link href="2021/05/19/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>2021/05/19/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>写算法题将近两年了，深知光看懂是远远不够的，必须要亲自动手，在不参照答案，完完整整的做对才行。像Dijkstra这样有点复杂的算法是有一定难度的，只有反复练习，如果写3次，自己都能写对，基本上就可以了。<br>本文附上几道与最短路径相关的题目与题解，欢迎初学的读者练习。</p><p>我在其他文章中写过的样例题也附在此页：<br>[hdu2544][<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2544%5D">http://acm.hdu.edu.cn/showproblem.php?pid=2544]</a><br>(Floyd/Dijkstra)</p><p>[hdu1599][<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1599%5D">http://acm.hdu.edu.cn/showproblem.php?pid=1599]</a><br>(Floyd拓展)</p><p>[hdu1874][<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874%5D">http://acm.hdu.edu.cn/showproblem.php?pid=1874]</a><br>(Dijkstra)</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2066"><mark class="hl-label blue">hdu2066</mark> </a></p><h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>虽然草儿是个路痴（就是在杭电待了一年多，居然还会在校园里迷路的人，汗~~),但是草儿仍然很喜欢旅行，因为在旅途中 会遇见很多人（白马王子，^0^），很多事，还能丰富自己的阅历，还可以看美丽的风景……草儿想去很多地方，她想要去东京铁塔看夜景，去威尼斯看电影，去阳明山上看海芋，去纽约纯粹看雪景，去巴黎喝咖啡写信，去北京探望孟姜女……眼看寒假就快到了，这么一大段时间，可不能浪费啊，一定要给自己好好的放个假，可是也不能荒废了训练啊，所以草儿决定在要在最短的时间去一个自己想去的地方！因为草儿的家在一个小镇上，没有火车经过，所以她只能去邻近的城市坐火车（好可怜啊~）。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入数据有多组，每组的第一行是三个整数T，S和D，表示有T条路，和草儿家相邻的城市的有S个，草儿想去的地方有D个；<br>接着有T行，每行有三个整数a，b，time,表示a,b城市之间的车程是time小时；(1=&lt;(a,b)&lt;=1000;a,b 之间可能有多条路)<br>接着的第T+1行有S个数，表示和草儿家相连的城市；<br>接着的第T+2行有D个数，表示草儿想去地方。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>输出草儿能去某个喜欢的城市的最短时间。</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 2 3</span><br><span class="line">1 3 5</span><br><span class="line">1 4 7</span><br><span class="line">2 8 12</span><br><span class="line">3 8 4</span><br><span class="line">4 9 12</span><br><span class="line">9 10 2</span><br><span class="line">1 2</span><br><span class="line">8 9 10</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a><mark class="hl-label blue">题解</mark> </h4><p>读完题后，先看输入样例，在纸上画图，不难发现，题意是:在目标城市中，找一个距离邻近城市最近的城市并输出两城市之间的距离。</p><p>思考：有很多邻近的城市以及很多目标城市，但是邻近城市到达草儿家的距离都是0，而此题中所有城市的编号是从1开始的。那么我们可以设置草儿家到所有邻近的城市的距离为0，然后使用Dijkstra算法，最后，设置一个MinLen,遍历目标城市距离起点的dis，与MinLen值比较，保留较小值，最后得到的就是答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> g[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> t,d,s,ed;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++) dis[i]=INF;</span><br><span class="line">dis[st]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;MAXN;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[j]&lt;MIN&amp;&amp;vis[j]==<span class="number">0</span>)&#123;</span><br><span class="line"> MIN=dis[j];</span><br><span class="line"> u=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;MAXN;v++)&#123;</span><br><span class="line"><span class="keyword">if</span>(g[u][v]!=INF&amp;&amp;vis[v]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+g[u][v]&lt;dis[v])</span><br><span class="line">dis[v]=dis[u]+g[u][v];</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;t,&amp;d,&amp;s))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;MAXN;j++)</span><br><span class="line">g[i][j]=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a,b,c,start[d],end[s];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(c&lt;g[a][b]) g[a][b]=g[b][a]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;start[i]);</span><br><span class="line">g[start[i]][<span class="number">0</span>]=g[<span class="number">0</span>][start[i]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;end[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MinLen=INF;</span><br><span class="line"><span class="built_in">Dijkstra</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[end[j]]&lt;MinLen)&#123;</span><br><span class="line">MinLen=dis[end[j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,MinLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-104-城市间紧急救援-25-分"><a href="#7-104-城市间紧急救援-25-分" class="headerlink" title="7-104 城市间紧急救援 (25 分)"></a>7-104 城市间紧急救援 (25 分)</h4><p>作为一个城市的应急救援队伍的负责人，你有一张特殊的全国地图。在地图上显示有多个分散的城市和一些连接城市的快速道路。每个城市的救援队数量和每一条连接两个城市的快速道路长度都标在地图上。当其他城市有紧急求助电话给你的时候，你的任务是带领你的救援队尽快赶往事发地，同时，一路上召集尽可能多的救援队。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第一行给出4个正整数N、M、S、D，其中N（2≤N≤500）是城市的个数，顺便假设城市的编号为0 ~ (N−1)；M是快速道路的条数；S是出发地的城市编号；D是目的地的城市编号。</p><p>第二行给出N个正整数，其中第i个数是第i个城市的救援队的数目，数字间以空格分隔。随后的M行中，每行给出一条快速道路的信息，分别是：城市1、城市2、快速道路的长度，中间用空格分开，数字均为整数且不超过500。输入保证救援可行且最优解唯一。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>第一行输出最短路径的条数和能够召集的最多的救援队数量。第二行输出从S到D的路径中经过的城市编号。数字间以空格分隔，输出结尾不能有多余空格。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 5 0 3</span><br><span class="line">20 30 40 10</span><br><span class="line">0 1 1</span><br><span class="line">1 3 2</span><br><span class="line">0 3 3</span><br><span class="line">0 2 2</span><br><span class="line">2 3 2</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 60</span><br><span class="line">0 1 3</span><br></pre></td></tr></table></figure><p>参考代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1000000</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">1001</span>],exs[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;,cf[<span class="number">1001</span>],ccf[<span class="number">1001</span>],pre[<span class="number">1001</span>];</span><br><span class="line"><span class="comment">//最短路径条数，各城市是否经过，各城市的救援队数量，到达该城市时所召集的所有救援队数量，到达该城市前经过的城市编号</span></span><br><span class="line"><span class="keyword">int</span> n,m,s,d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[s]=<span class="number">1</span>;<span class="comment">//开始时路径条数为1</span></span><br><span class="line">    exs[s]=<span class="number">1</span>;<span class="comment">//当前在出发城市</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> min=inf,f=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(exs[j]==<span class="number">0</span>&amp;&amp;a[s][j]&lt;min)&#123;<span class="comment">//寻找下一个距离最短的城市</span></span><br><span class="line">                min=a[s][j];</span><br><span class="line">                f=j;<span class="comment">//做好下一城市编号的标记</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">-1</span>)<span class="keyword">break</span>;<span class="comment">//与其他未经过的城市不连通，退出循环</span></span><br><span class="line">        <span class="keyword">else</span> exs[f]=<span class="number">1</span>;<span class="comment">//到达下一城市</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(exs[j]==<span class="number">0</span>&amp;&amp;a[s][j]&gt;a[s][f]+a[f][j])&#123;<span class="comment">//到达某一城市的最短路径</span></span><br><span class="line">                a[s][j]=a[s][f]+a[f][j];<span class="comment">//最短路径更新</span></span><br><span class="line">                pre[j]=f;<span class="comment">//记录上一个城市编号</span></span><br><span class="line">                cnt[j]=cnt[f];<span class="comment">//拷贝到达上一个城市时的最短路径条数</span></span><br><span class="line">                ccf[j]=ccf[f]+cf[j];<span class="comment">//到达某城市召集的全部救援队数量</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(exs[j]==<span class="number">0</span>&amp;&amp;a[s][j]==a[s][f]+a[f][j])&#123;<span class="comment">//发现其他的最短路径</span></span><br><span class="line">                cnt[j]=cnt[j]+cnt[f];<span class="comment">//更新到达当前城市时的最短路径条数</span></span><br><span class="line">                <span class="keyword">if</span>(ccf[j]&lt;ccf[f]+cf[j])&#123;<span class="comment">//最多救援队数量更新</span></span><br><span class="line">                    pre[j]=f;<span class="comment">//记录所经过的上一个城市编号</span></span><br><span class="line">                    ccf[j]=ccf[f]+cf[j];<span class="comment">//更新救援队总数</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;cf[i];</span><br><span class="line">        ccf[i]=cf[i];</span><br><span class="line">        cnt[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=j)a[i][j]=a[j][i]=inf;<span class="comment">//初始化（双向图）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> q,w,e;</span><br><span class="line">        cin&gt;&gt;q&gt;&gt;w&gt;&gt;e;</span><br><span class="line">        a[q][w]=a[w][q]=e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dijkstra</span>();</span><br><span class="line">    cout&lt;&lt;cnt[d]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ccf[d]+cf[s]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">int</span> road[<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,t=d;</span><br><span class="line">    <span class="keyword">while</span>(pre[t]!=<span class="number">0</span>)&#123;<span class="comment">//所经历的城市的从后往前的顺序</span></span><br><span class="line">        road[x++]=pre[t];</span><br><span class="line">        t=pre[t];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s;<span class="comment">//出发地</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;road[i];</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;d;<span class="comment">//目的地</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5月24日更新"><a href="#5月24日更新" class="headerlink" title="5月24日更新"></a>5月24日更新</h3><p>题目来源： PTA</p><h2 id="7-95-公路村村通-30-分"><a href="#7-95-公路村村通-30-分" class="headerlink" title="7-95 公路村村通 (30 分)"></a>7-95 公路村村通 (30 分)</h2><h3 id="现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。"><a href="#现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。" class="headerlink" title="现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。"></a>现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。</h3><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入数据包括城镇数目正整数N（≤1000）和候选道路数目M（≤3N）；随后的M行对应M条道路，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号以及该道路改建的预算成本。为简单起见，城镇从1到N编号。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>输出村村通需要的最低成本。如果输入数据不足以保证畅通，则输出−1，表示需要建设更多公路。</p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">6 15</span><br><span class="line">1 2 5</span><br><span class="line">1 3 3</span><br><span class="line">1 4 7</span><br><span class="line">1 5 4</span><br><span class="line">1 6 2</span><br><span class="line">2 3 4</span><br><span class="line">2 4 6</span><br><span class="line">2 5 2</span><br><span class="line">2 6 6</span><br><span class="line">3 4 6</span><br><span class="line">3 5 1</span><br><span class="line">3 6 1</span><br><span class="line">4 5 10</span><br><span class="line">4 6 8</span><br><span class="line">5 6 3</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><mark class="hl-label red">这道题考察的是最小生成树和并查集哦!</mark> <p>题解：用kruskal求解即可，另外要判断道路是否畅通可以用一个变量t，记录最小生成树的边数，最后判断一下，”边数是否等于点数减一“即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> S[<span class="number">1200</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x!=S[x]) x=S[x];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,w=INF;</span><br><span class="line">&#125;edge[<span class="number">3300</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) S[i]=i;</span><br><span class="line"><span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="built_in">find</span>(edge[i].x);</span><br><span class="line"><span class="keyword">int</span> b=<span class="built_in">find</span>(edge[i].y);</span><br><span class="line"><span class="keyword">if</span>(a!=b) &#123;</span><br><span class="line">S[a]=b;</span><br><span class="line">ans+=edge[i].w;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==n<span class="number">-1</span>)<span class="comment">//n个点，n-1条边 </span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">edge[i].x=a;</span><br><span class="line">edge[i].y=b;</span><br><span class="line">edge[i].w=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">kruskal</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
            <tag> 练习 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra 算法学习和练习</title>
      <link href="2021/05/17/Dijkstra-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0/"/>
      <url>2021/05/17/Dijkstra-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Dijikstra算法简介："><a href="#Dijikstra算法简介：" class="headerlink" title="Dijikstra算法简介："></a>Dijikstra算法简介：</h3><mark class="hl-label green">单源最短、没有负边、高效稳定、复杂</mark> <h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><mark class="hl-label blue">算法原理：</mark> 贪心法，从起点开始，每次都找一个离起点最近的点，每走过一个点，就用vis标记为已经走过的点。每次找到都是到起点最近的点，最后得到的一定是其他所有的点上（到起点的）最短路径。<mark class="hl-label blue">具体步骤：</mark> <p>首先用g[maxn][maxn]存储路径长度和结点的信息，注意本题中，两个结点间的长度可能不唯一，所以我们要选取最短的那条路，见第48行 <mark class="hl-label red">[1]</mark> </p><p>其次，用dis[i]数组，存储第i个结点到起点的最短距离，初始化的时候，dis[start+1]~dis[ed]的值均为INF（看作无限大），把dis[start]的值设为0，<br>（起点到起点的距离为0啊。）</p><p>接着，我们也要用到vis[maxn]来记录每一个结点的访问情况。每次走过一个点，就标记一下，注意，一定要在确定找到了下一个离自己最近的点以后，才能标记，<mark class="hl-label red">[2]就是错的，[3]才是对的</mark> </p><p>好，接下来就正式开始，第一层循环，最多遍历n次就能完成认为，第二层for循环，遍历所有的点（n个），把能走且没走过的路找出来 （dis[j]&lt; MAXN），在这些能走的路中，选一个路口（距离起点最短），标记为已走的路。<br>如果不存在这样的路，说明已经找完，（u==-1），这时候return即可。<br>以刚才标记的路口为u，通过u去拓展道路，例如，原先dis[v]=INF，g[u][v]=1;dis[u]=3;<br>通过u，我们可以到达v，从而使得v到达起点的距离，dis[v]=dis[u]+g[u][v]=4;<br>通过这样不断的扩展道路，我们最终能找出所有点到起点的最短路径。</p><mark class="hl-label blue">Ps：</mark> 这是最基础的求最短路，当图又大又稀疏的时候，就要对算法进行优化，另外，该算法还可以拓展，当题目中出现几条相同长度的道路的时候，需要考虑其他属性的时候（该题属性是道路长度），就要进行选择比较和保留，我们以后再进行拓展。<p>下面是一道非常基础的题目，也可以用Floyd算法解出。</p><h4 id="例题分析：hdu1874-http-acm-hdu-edu-cn-showproblem-php-pid-1874"><a href="#例题分析：hdu1874-http-acm-hdu-edu-cn-showproblem-php-pid-1874" class="headerlink" title="例题分析：hdu1874[http://acm.hdu.edu.cn/showproblem.php?pid=1874]"></a>例题分析：hdu1874[<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874%5D">http://acm.hdu.edu.cn/showproblem.php?pid=1874]</a></h4><h4 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description:"></a>Problem description:</h4><p>某省自从实行了很多年的畅通工程计划后，终于修建了很多路。不过路多了也不好，每次要从一个城镇到另一个城镇时，都有许多种道路方案可以选择，而某些方案要比另一些方案行走的距离要短很多。这让行人很困扰。</p><p>现在，已知起点和终点，请你计算出要从起点到终点，最短需要行走多少距离。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>本题目包含多组数据，请处理到文件结束。<br>每组数据第一行包含两个正整数N和M(0&lt;N&lt;200,0&lt;M&lt;1000)，分别代表现有城镇的数目和已修建的道路的数目。城镇分别以0～N-1编号。<br>接下来是M行道路信息。每一行有三个整数A,B,X(0&lt;=A,B&lt;N,A!=B,0&lt;X&lt;10000),表示城镇A和城镇B之间有一条长度为X的双向道路。</p><p>再接下一行有两个整数S,T(0&lt;=S,T&lt;N)，分别代表起点和终点。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>对于每组数据，请在一行里输出最短需要行走的距离。如果不存在从S到T的路线，就输出-1.</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">0 1 1</span><br><span class="line">0 2 3</span><br><span class="line">1 2 1</span><br><span class="line">0 2</span><br><span class="line">3 1</span><br><span class="line">0 1 1</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h4 id="Sample-Out"><a href="#Sample-Out" class="headerlink" title="Sample Out"></a>Sample Out</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> g[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m,st,ed;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//fill(dis[0],dis[0]+MAXN,INF);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">dis[i]=INF;<span class="comment">//初始化所有道路到起点距离无限大</span></span><br><span class="line">dis[st]=<span class="number">0</span>;<span class="comment">//标记起点到起点距离为0</span></span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));<span class="comment">//初始化标记数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//第一层循环</span></span><br><span class="line"><span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123; <span class="comment">// 第二层循环</span></span><br><span class="line"><span class="keyword">if</span>(vis[j]==<span class="number">0</span>&amp;&amp;dis[j]&lt;MIN)&#123; <span class="comment">//找出没走过的且距离起点最近的结点</span></span><br><span class="line">MIN=dis[j];</span><br><span class="line">u=j;</span><br><span class="line"><span class="comment">//vis[u]=1;////////////////////////////////////[2]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;<span class="comment">//没找到，退出。</span></span><br><span class="line">vis[u]=<span class="number">1</span>;<span class="comment">////////////////////////////////////////////[3]</span></span><br><span class="line">        <span class="comment">//标记为已走过的路</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;g[u][v]!=INF)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+g[u][v]&lt;dis[v])&#123;</span><br><span class="line">dis[v]=dis[u]+g[u][v];<span class="comment">//拓展能走的路</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))&#123;<span class="comment">//n个结点（城市），m条已修建的道路 </span></span><br><span class="line"> <span class="keyword">int</span> a,b,c;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"> g[i][j]=INF;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">  <span class="keyword">if</span>(c&lt;g[a][b])<span class="comment">/////////////////////////////[1]</span></span><br><span class="line">   g[a][b]=c,g[b][a]=c;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;st,&amp;ed);</span><br><span class="line"> <span class="built_in">Dijkstra</span>();</span><br><span class="line"> <span class="keyword">if</span>(dis[ed]!=INF) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dis[ed]);</span><br><span class="line"> <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们可以用Dijkstra算法求其他点到起点的最短路径了，但如果我们想求出从起点到终点的路径信息，还要继续往下学习。<br>先看例题：<br>例题来源：PTA</p><h2 id="7-199-最短路径之Dijkstra-10-分"><a href="#7-199-最短路径之Dijkstra-10-分" class="headerlink" title="7-199 最短路径之Dijkstra (10 分)"></a>7-199 最短路径之Dijkstra (10 分)</h2><p>本题目要求通过读入无向网的边的信息（省略了各顶点的信息，仅用顶点编号来表示），构造图，并利用Dijkstra算法，求出指定源点到其它各点的最短路径。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><p>第一行，两个整数，顶点数vN和边数eN。 以后若干行，是相关边的信息，无向图的边是对称的，只输入一半的边（小编号到大编号的，间以空格），最后两行各一个整数，前一个指定源点，后一个指定的查询的终到点。 （注意，示例中34条边，只输入了17条边的信息）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">10 34</span><br><span class="line">0 1 2</span><br><span class="line">0 3 5</span><br><span class="line">1 2 5</span><br><span class="line">1 3 2</span><br><span class="line">2 4 8</span><br><span class="line">2 5 4</span><br><span class="line">3 5 4</span><br><span class="line">3 6 2</span><br><span class="line">4 7 5</span><br><span class="line">4 5 2</span><br><span class="line">5 6 3</span><br><span class="line">5 7 9</span><br><span class="line">5 8 7</span><br><span class="line">6 8 7</span><br><span class="line">7 8 3</span><br><span class="line">7 9 4</span><br><span class="line">8 9 8</span><br><span class="line">0</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><p>在一行中输出从源点到指定终点的短路径及代价，注意：所有符号均为西文符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0--&gt;1--&gt;3--&gt;6--&gt;8:13</span><br></pre></td></tr></table></figure><p>先附上代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">65535</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w;</span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, e, s, d;</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">1001</span>], pre[<span class="number">1001</span>];</span><br><span class="line">vector&lt;Node&gt; v[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1001</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(dis, dis + <span class="number">1001</span>, inf);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, minx = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dis[j] &lt; minx) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                minx = dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[u].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = v[u][j].v;</span><br><span class="line">            <span class="keyword">if</span> (!vis[x] &amp;&amp; dis[u] + v[u][j].w &lt; dis[x]) &#123;</span><br><span class="line">                dis[x] = dis[u] + v[u][j].w;</span><br><span class="line">                pre[x] = u;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        v[a].<span class="built_in">push_back</span>(Node&#123;b, c&#125;);</span><br><span class="line">        v[b].<span class="built_in">push_back</span>(Node&#123;a, c&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;s, &amp;d);</span><br><span class="line">    <span class="keyword">if</span> (s == d) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d--&gt;%d:0&quot;</span>, s,s);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>(s);</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line">    <span class="keyword">int</span> x = d;</span><br><span class="line">    <span class="keyword">while</span> (x != s) &#123;</span><br><span class="line">        ve.<span class="built_in">push_back</span>(x);</span><br><span class="line">        x = pre[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ve.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;--&gt;%d&quot;</span>, ve[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;:%d&quot;</span>, dis[d]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 求最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd算法基础学习和练习</title>
      <link href="2021/05/08/Floyd%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0/"/>
      <url>2021/05/08/Floyd%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Floyd求最短路径"><a href="#Floyd求最短路径" class="headerlink" title="Floyd求最短路径"></a>Floyd求最短路径</h4><h5 id="优点：算法简单"><a href="#优点：算法简单" class="headerlink" title="优点：算法简单"></a>优点：算法简单</h5><h5 id="缺点：时间复杂度大，图的结点适合在以内"><a href="#缺点：时间复杂度大，图的结点适合在以内" class="headerlink" title="缺点：时间复杂度大，图的结点适合在以内"></a>缺点：时间复杂度大，图的结点适合在<mark class="hl-label red">200</mark> 以内</h5><h5 id=""><a href="#" class="headerlink" title=""></a><mark class="hl-label green">在小图中可以尝试floyd算法，简单省时，如果图过大，还是要用Dijistra算法</mark> </h5><p>Floyd采用了3个循环，遍历所有两两不同的点。<br>通过循环来更新两点之间的最短路径。<br>举个例子，有两个点A，B，它们是连通的，但是它们之间的距离很长，就像两个村子隔了一座大山，AB是绕过这座山，这时候，在山上发现一个洞口，这个洞（记为K）横穿大山，从A到K再从K到B的距离比原来不经过K点的路径更短，这样我们就把AB的长度更新为AK+KB。<br>更新完所有节点的长度后，就能得到，起点到终点的最短路径。</p><h6 id="为了说明算法，我们先看一道题。"><a href="#为了说明算法，我们先看一道题。" class="headerlink" title="为了说明算法，我们先看一道题。"></a>为了说明算法，我们先看一道题。</h6><p>例题hdu2544[<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2544%5D">http://acm.hdu.edu.cn/showproblem.php?pid=2544]</a></p><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入包括多组数据。每组数据第一行是两个整数N、M（N&lt;=100，M&lt;=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1&lt;=A,B&lt;=N,1&lt;=C&lt;=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。<br>输入保证至少存在1条商店到赛场的路线。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">1 2 3</span><br><span class="line">3 3</span><br><span class="line">1 2 5</span><br><span class="line">2 3 5</span><br><span class="line">3 1 2</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">220</span>][<span class="number">220</span>]; </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if(a[i][k]==INF) continue;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]&gt;a[i][k]+a[k][j]) &#123;</span><br><span class="line">a[i][j]=a[i][k]+a[k][j];<span class="comment">//更新最短路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans=<span class="built_in">min</span>(ans,a[i][i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)))&#123;</span><br><span class="line"><span class="comment">//if(n+m==0) return 0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">a[i][j]=INF;<span class="comment">//初始，所有结点间的距离看作无限大</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">a[x][y]=a[y][x]=z;  <span class="comment">// 无向图存储用邻接矩阵</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">floyd</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 求最短路 </tag>
            
            <tag> Floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd拓展：找最小圈</title>
      <link href="2021/05/07/Floyd%E6%8B%93%E5%B1%95%EF%BC%9A%E6%89%BE%E6%9C%80%E5%B0%8F%E5%9C%88/"/>
      <url>2021/05/07/Floyd%E6%8B%93%E5%B1%95%EF%BC%9A%E6%89%BE%E6%9C%80%E5%B0%8F%E5%9C%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="程序伊始，某个结点a-i-i-的值是INF，但是运行完之后，其值变为a-i-i-a-i-u-a-u-v-…-a-v-i-这是什么情况呢？其实这就是从起点出发，在图上绕了一个最小圈的路径。"><a href="#程序伊始，某个结点a-i-i-的值是INF，但是运行完之后，其值变为a-i-i-a-i-u-a-u-v-…-a-v-i-这是什么情况呢？其实这就是从起点出发，在图上绕了一个最小圈的路径。" class="headerlink" title="程序伊始，某个结点a[i][i]的值是INF，但是运行完之后，其值变为a[i][i]=a[i][u]+a[u][v]+…+a[v][i],这是什么情况呢？其实这就是从起点出发，在图上绕了一个最小圈的路径。"></a>程序伊始，某个结点a[i][i]的值是INF，但是运行完之后，其值变为a[i][i]=a[i][u]+a[u][v]+…+a[v][i],这是什么情况呢？其实这就是从起点出发，在图上绕了一个最小圈的路径。</h5><h5 id="还是用一道例题来说明算法-http-acm-hdu-edu-cn-showproblem-php-pid-1599"><a href="#还是用一道例题来说明算法-http-acm-hdu-edu-cn-showproblem-php-pid-1599" class="headerlink" title="还是用一道例题来说明算法[http://acm.hdu.edu.cn/showproblem.php?pid=1599]"></a>还是用一道例题来说明算法[<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1599%5D">http://acm.hdu.edu.cn/showproblem.php?pid=1599]</a></h5><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入包括多组数据。每组数据第一行是两个整数N、M（N&lt;=100，M&lt;=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1&lt;=A,B&lt;=N,1&lt;=C&lt;=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。<br>输入保证至少存在1条商店到赛场的路线。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间</p><p>Sample Input</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">1 2 3</span><br><span class="line">3 3</span><br><span class="line">1 2 5</span><br><span class="line">2 3 5</span><br><span class="line">3 1 2</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 求最短路 </tag>
            
            <tag> Floyd </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
